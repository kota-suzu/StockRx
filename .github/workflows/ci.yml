name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

      - name: Scan for vulnerabilities in Ruby dependencies  
        run: bundle exec bundle-audit check --update

  # importmapが設定されていない場合はこのジョブをスキップします
  # 以下のいずれかを選択してください：
  # 1. importmapをインストールする: bundle exec rails importmap:install
  # 2. このジョブを有効化する
  # scan_js:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: .ruby-version
  #         bundler-cache: true
  #
  #     - name: Scan for security vulnerabilities in JavaScript dependencies
  #       run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: app_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      # redis:
      #   image: redis
      #   ports:
      #     - 6379:6379
      #   options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl default-mysql-client libjemalloc2 libvips xvfb

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Headless Chrome for System Tests
        run: |
          # Chrome WebDriverの準備
          export DISPLAY=:99.0
          Xvfb :99 -screen 0 1024x768x24 -ac &
          
          # Chrome WebDriverのバージョン確認
          google-chrome --version
          which google-chrome
          
          # Capybaraテスト用の環境変数設定
          echo "CAPYBARA_SERVER_HOST=0.0.0.0" >> $GITHUB_ENV
          echo "CAPYBARA_SERVER_PORT=3001" >> $GITHUB_ENV
          echo "DISPLAY=:99.0" >> $GITHUB_ENV

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Prepare cache directories
        run: |
          # 完全にキャッシュを削除して問題を解決
          rm -rf tmp/cache tmp/bootsnap* tmp/caching-dev.txt
          
          # 必要なディレクトリを作成
          mkdir -p tmp/cache/assets tmp/storage tmp/pids
          chmod -R 777 tmp/cache tmp/storage tmp/pids
          
          # Zeitwerkのオートロード問題を回避
          touch tmp/restart.txt
          
          # Zeitwerkの自動ロードチェックを実行
          bundle exec rails zeitwerk:check || true

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: mysql2://root:@127.0.0.1:3306/app_test
          DATABASE_PASSWORD: ""
          # REDIS_URL: redis://localhost:6379/0
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
          # Host Authorization完全無効化（ローカル環境との統一）
          DISABLE_HOST_AUTHORIZATION: true
          # Rails 7.2対応：環境変数で明示的に設定
          RAILS_ZEITWERK_MISMATCHES: error
          # CI環境フラグ
          CI: true
          # Capybara WebDriver設定
          CAPYBARA_SERVER_HOST: 0.0.0.0
          CAPYBARA_SERVER_PORT: 3001
          DISPLAY: ":99.0"
          # Chrome WebDriver設定
          CHROME_HEADLESS: 1
          SELENIUM_CHROME_OPTIONS: "--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1024,768"
          # CI最適化環境変数
          SKIP_SLOW_TESTS: true
          RSPEC_FORMAT: progress
          PARALLEL_TEST_FIRST_IS_1: true
        run: |
          # MySQL準備完了待機（ローカルのwait-forスクリプトと同等機能）
          echo "MySQL接続確認中..."
          until mysqladmin ping -h 127.0.0.1 -u root --silent 2>/dev/null; do
            echo "MySQL準備待機中..."
            sleep 2
          done
          echo "MySQL接続確認完了"
          
          # データベース作成確認（存在しない場合は作成）
          mysql -h 127.0.0.1 -u root -e "CREATE DATABASE IF NOT EXISTS app_test;" 2>/dev/null || true
          
          # データベース準備（Zeitwerkリロードを削除して安全性向上）
          bin/rails db:test:prepare
          
          # テスト実行（CI最適化オプション付き）
          # --format progress: CI環境用軽量出力形式
          # --order random: テスト順序ランダム化で依存性問題を検出
          # --profile 5: 最も遅い5テストを表示（パフォーマンス監視）
          bundle exec rspec --format progress --order random --profile 5

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

      # TODO: 🟡 Phase 6（重要）- CI/CDパイプライン拡張（推定1週間）
      # 優先度: 中（DevOps・運用改善）
      # 実装内容:
      #   - 並列テスト実行（parallel gem活用）
      #   - テスト結果キャッシュ最適化
      #   - Docker layer キャッシュ戦略
      #   - 条件付きデプロイメント自動化
      #
      # TODO: 🟢 Phase 7（推奨）- 包括的品質監視（推定2週間）  
      # 優先度: 低（長期的品質向上）
      # 実装内容:
      #   - CodeClimate統合（技術的負債監視）
      #   - Coveralls統合（カバレッジトレンド分析）
      #   - 依存関係脆弱性スキャン自動化
      #   - パフォーマンス回帰検知システム
      #
      # 横展開確認:
      #   - staging環境での自動デプロイ
      #   - production環境での段階的リリース
      #   - モニタリング・アラート統合