name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  # importmapが設定されていない場合はこのジョブをスキップします
  # 以下のいずれかを選択してください：
  # 1. importmapをインストールする: bundle exec rails importmap:install
  # 2. このジョブを有効化する
  # scan_js:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: .ruby-version
  #         bundler-cache: true
  #
  #     - name: Scan for security vulnerabilities in JavaScript dependencies
  #       run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: app_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=127.0.0.1 --port=3306 --user=root --password=password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      # redis:
      #   image: redis
      #   ports:
      #     - 6379:6379
      #   options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl default-mysql-client libjemalloc2 libvips

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Prepare cache directories
        run: |
          # 完全にキャッシュを削除して問題を解決
          rm -rf tmp/cache tmp/bootsnap* tmp/caching-dev.txt
          
          # 必要なディレクトリを作成
          mkdir -p tmp/cache/assets tmp/storage tmp/pids
          chmod -R 777 tmp/cache tmp/storage tmp/pids
          
          # Zeitwerk関連の準備（CI環境向け）
          # test環境ではリロードが無効のため、事前チェックのみ実行
          echo "Running Zeitwerk autoload check..."
          bundle exec rails zeitwerk:check || echo "Zeitwerk check completed with warnings"

      # TODO: 将来的なCI/CD改善項目（優先度：中）
      # - テスト並列実行によるCI時間短縮
      # - テスト結果の可視化（junit形式レポート）
      # - 失敗時のデバッグ情報収集強化
      # - パフォーマンス監視メトリクス追加
      
      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: mysql2://root:password@127.0.0.1:3306/app_test
          DATABASE_HOST: 127.0.0.1
          DATABASE_PORT: 3306
          DATABASE_USERNAME: root
          DATABASE_PASSWORD: password
          # REDIS_URL: redis://localhost:6379/0
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
          # Rails 8.0対応：環境変数で明示的に設定
          RAILS_ZEITWERK_MISMATCHES: error
        run: |
          # CI環境でのキャッシュクリア（ベストプラクティス）
          # Zeitwerkはproduction/test環境ではリロード不可のため、物理的にキャッシュをクリア
          rm -rf tmp/cache/bootsnap-*
          
          # MySQL接続の確認と待機（ベストプラクティス）
          echo "Waiting for MySQL to be ready..."
          mysql_ready=0
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ppassword --silent; then
              echo "MySQL is ready!"
              mysql_ready=1
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done
          
          # MySQL接続エラーのハンドリング（ベストプラクティス）
          if [ $mysql_ready -eq 0 ]; then
            echo "ERROR: MySQL failed to start after 30 attempts (60 seconds)"
            echo "Checking MySQL container logs..."
            docker ps -a
            docker logs $(docker ps -aq --filter "ancestor=mysql:8.0") || true
            exit 1
          fi
          
          # データベースの準備とテスト実行
          bin/rails db:test:prepare
          bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore