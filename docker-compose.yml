# ============================================
# StockRx - Docker Compose Configuration
# ============================================
# 開発環境用のDocker Compose設定
# 本番環境では docker-compose.prod.yml を使用

# ============================================
# TODO: インフラ関連の改善（優先度：高）
# REF: README.md - インフラ関連
# ============================================
# 1. バックアップの保存期間設定と古いバックアップの自動削除
#    - 自動バックアップスケジューリング（cron + mysqldump）
#    - 保存期間ポリシー（日次：30日、週次：12週、月次：12ヶ月）
#    - Amazon S3/Google Cloud Storage への自動アップロード
#    - バックアップファイルの整合性チェック機能
#
# 2. Redisのメモリ設定の最適化
#    - メモリ使用量の監視とアラート設定
#    - eviction policy の最適化（allkeys-lru など）
#    - Redis Cluster 対応（高可用性・スケーラビリティ）
#    - 永続化設定の最適化（RDB + AOF）
#
# 3. セキュリティ強化
#    - パスワードの環境変数化（.env.example の整備）
#    - SSL/TLS設定（Let's Encrypt自動更新）
#    - ファイアウォール設定（UFW/iptables）
#    - セキュリティヘッダー設定（Helmet.js相当）
#    - Docker image の脆弱性スキャン（Trivy/Snyk）
#
# 4. ログローテーション設定
#    - logrotate による自動ローテーション
#    - 構造化ログ（JSON format）の導入
#    - 中央ログ管理（ELK Stack / Fluentd）
#    - ログレベル別の保存期間設定
#
# 5. 本番環境向けのDockerfile最適化
#    - マルチステージビルドによるイメージサイズ削減
#    - Alpine Linux ベースイメージの採用
#    - 不要なパッケージの除去
#    - セキュリティパッチの自動適用

services:
  web:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
    environment:
      - RAILS_ENV=development
      - DATABASE_URL=mysql2://root:password@db:3306/app_db
      - REDIS_URL=redis://redis:6379/0
      # TODO: セキュリティ強化 - 環境変数化
      # - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      # - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - .:/rails
      - ./tmp/bundle_cache:/bundle
      # TODO: ログ管理の改善
      # - ./log:/rails/log
      # - ./storage:/rails/storage
    stdin_open: true
    tty: true
    command: ["./bin/rails", "server", "-b", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: mysql:8.4
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: app_db
      # TODO: セキュリティ強化 - パスワード環境変数化
      # MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # MYSQL_USER: ${MYSQL_USER}
      # MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      # TODO: バックアップ機能の追加
      # - ./backup:/backup
      # - ./mysql/init:/docker-entrypoint-initdb.d
    # TODO: MySQL設定の最適化
    # command: 
    #   - --character-set-server=utf8mb4
    #   - --collation-server=utf8mb4_unicode_ci
    #   - --innodb_buffer_pool_size=256M
    #   - --max_connections=200

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    # TODO: Redis設定の最適化
    # command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    # environment:
    #   - REDIS_PASSWORD=${REDIS_PASSWORD}

  # TODO: 本番環境での追加サービス
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl:/etc/ssl/certs
  #   depends_on:
  #     - web
  #
  # backup:
  #   image: alpine:latest
  #   volumes:
  #     - mysql_data:/source/mysql
  #     - redis_data:/source/redis
  #     - ./backup:/backup
  #   environment:
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  #     - S3_BUCKET=${BACKUP_S3_BUCKET}
  #   command: |
  #     sh -c "
  #       echo '0 2 * * * /backup/scripts/mysql_backup.sh' > /var/spool/cron/crontabs/root
  #       echo '0 3 * * 0 /backup/scripts/cleanup_old_backups.sh' >> /var/spool/cron/crontabs/root
  #       crond -f
  #     "

volumes:
  mysql_data:
    # TODO: バックアップボリューム設定
    # driver: local
    # driver_opts:
    #   type: nfs
    #   o: addr=backup-server,rw
    #   device: ":/backup/mysql"
  redis_data:

# TODO: ネットワーク設定の追加
# networks:
#   stockrx_network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.20.0.0/16

# TODO: 監視・ヘルスチェック機能
# healthcheck 設定の追加
# Prometheus + Grafana による監視
# ELK Stack によるログ分析
