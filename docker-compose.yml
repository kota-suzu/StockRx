# TODO: Compose v2以降はversion属性不要。将来的な警告回避のため削除。
# TODO: 環境変数は.envファイルに移動して管理する
# TODO: バックアップの保存期間設定と古いバックアップの自動削除機能の追加
# TODO: Redisのメモリ設定の最適化
# TODO: セキュリティ強化（パスワードの環境変数化、SSL/TLS設定など）
# TODO: ログローテーション設定の追加
# TODO: ヘルスチェックの間隔とタイムアウト値の最適化
# TODO: 本番環境向けのDockerfile最適化（マルチステージビルド導入）

services:
  web:
    build: 
      context: .
      args:
        RUBY_VERSION: 3.3.8
    command: ["./wait-for", "db:3306", "--timeout=30", "--debug", "--", "./bin/rails", "server", "-b", "0.0.0.0"]
    ports:
      - "3000:3000"
    volumes:
      - .:/rails
      - bundle_cache:/usr/local/bundle
    environment:
      - RAILS_MAX_THREADS=5
      - MYSQL_ROOT_PASSWORD=password
      - RAILS_ENV=development
      - DATABASE_HOST=db
      - DATABASE_USERNAME=root
      - DATABASE_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - CABLE_REDIS_URL=redis://redis:6379/1
      # Disable Bootsnap in development for easier debugging
      - DISABLE_BOOTSNAP=true
      # ============================================
      # Email Configuration (MailHog Integration)
      # ============================================
      # CLAUDE.md準拠: 環境変数による設定管理
      # メタ認知: 開発環境でのメール送信テスト環境
      - MAIL_DELIVERY_METHOD=smtp           # MailHog SMTP使用
      - SMTP_ADDRESS=mailhog                # Docker内部ホスト名
      - SMTP_PORT=1025                      # MailHog SMTP port
      - SMTP_DOMAIN=localhost               # ドメイン設定
      - MAIL_HOST=localhost                 # URL生成用ホスト
      - MAIL_PORT=3000                      # URL生成用ポート
      # 認証なし（MailHogは認証不要）
      # - SMTP_USERNAME=                    # 空文字 = 認証なし
      # - SMTP_PASSWORD=                    # 空文字 = 認証なし
    depends_on:
      db:
        condition: service_healthy
      mailhog:
        condition: service_healthy  # MailHog準備完了後に有効化
    networks:
      - app
    # TODO: 本番環境ではヘルスチェック追加

  db:
    image: mysql:8.4
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=app_db
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      # CI環境用MySQL設定ファイル（2025年6月9日追加）
      # 環境変数 CI_DATABASE_CONFIG=true でCI最適化設定を適用
      - type: bind
        source: ./config/mysql/${CI_DATABASE_CONFIG:-default}.cnf
        target: /etc/mysql/conf.d/ci-optimized.cnf
        bind:
          create_host_path: true
    # MySQL 8.4+ では default-authentication-plugin は非推奨のためコメントアウト
    # command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 10s
      timeout: 15s  # タイムアウトを10s → 15sに延長
      retries: 10
      start_period: 40s  # 開始期間を30s → 40sに延長（CI環境での安定性向上）
    ports:
      - "3306:3306"
    networks:
      - app

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app
    # TODO: 本番環境向けRedis設定ファイル追加

  sidekiq:
    build: 
      context: .
      args:
        RUBY_VERSION: 3.3.8
    command: ["./wait-for", "db:3306", "--timeout=30", "--debug", "--", "bundle", "exec", "sidekiq"]
    volumes:
      - .:/rails
      - bundle_cache:/usr/local/bundle
    environment:
      - RAILS_MAX_THREADS=5
      - MYSQL_ROOT_PASSWORD=password
      - RAILS_ENV=development
      - DATABASE_HOST=db
      - DATABASE_USERNAME=root
      - DATABASE_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - CABLE_REDIS_URL=redis://redis:6379/1
      # Disable Bootsnap in development for easier debugging
      - DISABLE_BOOTSNAP=true
      # ============================================
      # Email Configuration (MailHog Integration)
      # ============================================
      # CLAUDE.md準拠: バックグラウンドジョブでのメール送信対応
      # メタ認知: SidekiqでのEmailAuthService使用を考慮
      - MAIL_DELIVERY_METHOD=smtp           # MailHog SMTP使用
      - SMTP_ADDRESS=mailhog                # Docker内部ホスト名
      - SMTP_PORT=1025                      # MailHog SMTP port
      - SMTP_DOMAIN=localhost               # ドメイン設定
      - MAIL_HOST=localhost                 # URL生成用ホスト
      - MAIL_PORT=3000                      # URL生成用ポート
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      mailhog:
        condition: service_healthy  # MailHog準備完了後に有効化
    networks:
      - app
    # TODO: 本番環境ではヘルスチェック追加

  backup:
    image: mysql:8.4
    volumes:
      - ./backup:/backup
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=app_db
    command: >
      bash -c "
        while true; do
          sleep 86400;
          mysqldump -h db -u root -ppassword app_db > /backup/backup-$(date +%Y%m%d).sql;
        done
      "
    depends_on:
      - db
    networks:
      - app
    # TODO: バックアップローテーション機能の追加

  # ============================================
  # Development Mail Server (MailHog for Email Testing)
  # ============================================
  # CLAUDE.md準拠: 開発環境メール送信テスト用
  # 用途: EmailAuthService + StoreAuthMailer のテスト環境
  # アクセス: http://localhost:8025 (Web UI)
  # SMTP: localhost:1025
  mailhog:
    image: mailhog/mailhog:latest
    container_name: stockrx_mailhog
    ports:
      - "1025:1025"  # SMTP port (Rails接続用)
      - "8025:8025"  # Web UI port (メール確認用)
    environment:
      - MH_STORAGE=memory           # メモリ内保存（高速）
      - MH_UI_BIND_ADDR=0.0.0.0:8025
      - MH_API_BIND_ADDR=0.0.0.0:8025
      - MH_HOSTNAME=stockrx-mailhog # ホスト名設定
    networks:
      - app  # 他サービスと同じネットワーク使用
    # profiles削除 - 通常のdocker-compose upで起動
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3
    # TODO: 🟡 Phase 2（機能強化）- MailHog永続化オプション
    # 優先度: 中（開発効率向上）
    # 実装内容:
    #   - MH_STORAGE=maildir + volumeマウント
    #   - メール履歴の永続化
    #   - 複数開発者間でのメール履歴共有
    # volumes:
    #   - mailhog_data:/maildir

volumes:
  mysql_data:
  redis_data:
  bundle_cache:

networks:
  app:
    driver: bridge