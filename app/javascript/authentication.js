// üîê Ë™çË®ºÁîªÈù¢Â∞ÇÁî®JavaScript - Bootstrap + TurboÂØæÂøú
// CLAUDE.mdÊ∫ñÊã†: „Ç§„É≥„É©„Ç§„É≥„Çπ„ÇØ„É™„Éó„Éà„ÅÆÂ§ñÈÉ®Âåñ„ÅßCSPÂØæÂøú„Å®„É°„É≥„ÉÜ„Éä„É≥„ÇπÊÄßÂêë‰∏ä
// „É°„ÇøË™çÁü•: Ë™çË®ºÊ©üËÉΩ„ÅÆÁ¢∫ÂÆü„Å™Âãï‰Ωú‰øùË®º„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑Âåñ

// TurboÂØæÂøú„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
document.addEventListener('turbo:load', initializeAuthenticationPage);
document.addEventListener('DOMContentLoaded', initializeAuthenticationPage);

function initializeAuthenticationPage() {
  // Ë™çË®º„Éö„Éº„Ç∏„Åß„Å™„ÅÑÂ†¥Âêà„ÅØÂá¶ÁêÜ„ÇíÂÅúÊ≠¢
  if (!document.querySelector('.gradient-bg') && !document.querySelector('#loginTabs')) {
    console.log('‚ÑπÔ∏è [Authentication] Not an authentication page, skipping initialization');
    return;
  }
  
  console.log('üîê [Authentication] Authentication page detected, starting initialization...');
  
  // Âç≥Â∫ß„Å´„Çø„ÉñÊ©üËÉΩ„ÇíÊúâÂäπÂåñÔºàÈÅÖÂª∂„Å™„ÅóÔºâ
  console.log('üîß [Authentication] Starting immediate tab initialization...');
  initializeTabsImmediately();
  
  // Bootstrap TabÂàùÊúüÂåñÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
  setTimeout(() => {
    console.log('üîß [Authentication] Starting delayed Bootstrap tab initialization...');
    try {
      if (typeof bootstrap !== 'undefined' && bootstrap.Tab) {
        console.log('üì¶ [Authentication] Bootstrap available, using Bootstrap Tab implementation');
        initializeAuthTabs();
      } else {
        console.log('üîß [Authentication] Bootstrap not available, using manual implementation');
        setupManualAuthTabs();
      }
    } catch (error) {
      console.error('‚ùå [Authentication] Bootstrap initialization failed:', error);
      setupManualAuthTabs();
    }
  }, 100);
  
  // „Éë„Çπ„Ç≥„Éº„ÉâË™çË®ºÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
  console.log('üìß [Authentication] Initializing passcode authentication...');
  initializePasscodeAuth();
  
  // „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
  console.log('üîç [Authentication] Setting up form validation...');
  initializeFormValidation();
  
  // ÂàùÊúü„Éï„Ç©„Éº„Ç´„ÇπË®≠ÂÆö
  console.log('üéØ [Authentication] Setting initial focus...');
  setInitialFocus();
  
  console.log('‚úÖ [Authentication] All authentication features initialized successfully');
}

// Âç≥Â∫ß„Å´„Çø„ÉñÊ©üËÉΩ„ÇíÊúâÂäπÂåñÔºàÊúÄÂÑ™ÂÖàÂá¶ÁêÜÔºâ
function initializeTabsImmediately() {
  const tabElements = document.querySelectorAll('[data-bs-toggle="tab"]');
  
  if (tabElements.length === 0) {
    console.log('‚ÑπÔ∏è No tab elements found for immediate initialization');
    return;
  }
  
  console.log(`üöÄ [Authentication] Immediate tab initialization for ${tabElements.length} elements`);
  
  // ÂÖ®„Å¶„ÅÆ„Çø„ÉñË¶ÅÁ¥†„Å´Âç≥Â∫ß„Å´„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíË®≠ÂÆö
  tabElements.forEach((tabElement, index) => {
    console.log(`‚ö° Setting up immediate handler for tab ${index + 1}: ${tabElement.id || 'unnamed'}`);
    
    // Êó¢Â≠ò„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÂâäÈô§„Åó„Å¶„ÇØ„É™„Éº„É≥Áä∂ÊÖã„Å´„Åô„Çã
    const newElement = tabElement.cloneNode(true);
    tabElement.parentNode.replaceChild(newElement, tabElement);
    
    // Êñ∞„Åó„ÅÑË¶ÅÁ¥†„Å´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
    setupImmediateTabHandler(newElement);
  });
  
  console.log('‚úÖ [Authentication] Immediate tab handlers set up successfully');
}

// ÂÄãÂà•„Çø„ÉñË¶ÅÁ¥†„ÅÆÂç≥Â∫ß„ÅÆË®≠ÂÆö
function setupImmediateTabHandler(tabElement) {
  // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
  tabElement.addEventListener('click', function(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log(`üëÜ [ImmediateTab] Click detected on: ${this.id || 'unnamed'}`);
    handleAuthTabToggle(this);
  });
  
  // „Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„Éà
  tabElement.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      e.stopPropagation();
      console.log(`‚å®Ô∏è [ImmediateTab] Keyboard activation on: ${this.id || 'unnamed'}`);
      handleAuthTabToggle(this);
    }
  });
  
  // „Éû„Ç¶„Çπ„Ç§„Éô„É≥„ÉàÔºàË¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºâ
  tabElement.addEventListener('mouseenter', function() {
    if (!this.classList.contains('active')) {
      this.style.backgroundColor = '#f8f9fa';
    }
  });
  
  tabElement.addEventListener('mouseleave', function() {
    if (!this.classList.contains('active')) {
      this.style.backgroundColor = '';
    }
  });
  
  console.log(`‚úÖ [ImmediateTab] Handler set up for: ${tabElement.id || 'unnamed'}`);
}

// Bootstrap „Çø„ÉñÂàùÊúüÂåñÔºàË™çË®ºÁîªÈù¢Â∞ÇÁî®Ôºâ
function initializeAuthTabs() {
  const tabElements = document.querySelectorAll('[data-bs-toggle="tab"]');
  
  if (tabElements.length === 0) {
    console.log('‚ÑπÔ∏è No tab elements found for Bootstrap initialization');
    return;
  }
  
  console.log(`üîê [Authentication] Found ${tabElements.length} tab elements for Bootstrap initialization`);
  
  tabElements.forEach((element, index) => {
    try {
      // Êó¢Â≠ò„Ç§„É≥„Çπ„Çø„É≥„ÇπÈáçË§áÈò≤Ê≠¢ÔºàÁ¢∫ÂÆü„Å™ÂàùÊúüÂåñ„ÅÆ„Åü„ÇÅÔºâ
      const existingInstance = bootstrap.Tab.getInstance(element);
      if (existingInstance) {
        console.log(`üîÑ [Authentication] Disposing existing tab instance: ${element.id || 'unnamed'}`);
        existingInstance.dispose();
      }
      
      // Êñ∞„Åó„ÅÑTab„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
      const tab = new bootstrap.Tab(element);
      console.log(`‚úÖ [Authentication] Bootstrap Tab ${index + 1} initialized: ${element.id || 'unnamed'}`);
      
      // „Éë„Çπ„Ç≥„Éº„Éâ„Çø„ÉñÁâπÂÆö„É≠„Ç∞ÔºàÈáçË¶Å„Å™Ê©üËÉΩÔºâ
      if (element.id === 'passcode-tab') {
        console.log('üéØ [Authentication] Passcode tab Bootstrap initialized - critical feature ready');
      }
      
    } catch (error) {
      console.error(`‚ùå [Authentication] Tab ${index + 1} Bootstrap initialization failed:`, error);
      console.log(`üîß [Authentication] Element ${index + 1} already has manual handler`);
    }
  });
  
  console.log('üéØ [Authentication] Bootstrap tabs initialization completed');
}

// ÊâãÂãï„Çø„ÉñÊ©üËÉΩÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
function setupManualAuthTabs() {
  const tabElements = document.querySelectorAll('[data-bs-toggle="tab"]');
  
  console.log(`üîß [Authentication] Setting up manual tabs for ${tabElements.length} elements`);
  
  tabElements.forEach((tabElement, index) => {
    console.log(`üîß Setting up manual tab ${index + 1}: ${tabElement.id || 'unnamed'}`);
    setupManualTabForElement(tabElement);
  });
  
  console.log('‚úÖ [Authentication] Manual auth tabs setup completed');
}

// ÂÄãÂà•„Çø„ÉñË¶ÅÁ¥†„ÅÆÊâãÂãïË®≠ÂÆö
function setupManualTabForElement(tabElement) {
  // ÈáçË§áÈò≤Ê≠¢„ÉÅ„Çß„ÉÉ„ÇØ
  if (tabElement.dataset.manualTabSetup === 'true') {
    console.log(`‚ÑπÔ∏è Manual tab already set up for: ${tabElement.id || 'unnamed'}`);
    return;
  }
  
  tabElement.addEventListener('click', function(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log(`üëÜ [ManualTab] Click on: ${this.id || 'unnamed'}`);
    handleAuthTabToggle(this);
  });
  
  tabElement.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      e.stopPropagation();
      console.log(`‚å®Ô∏è [ManualTab] Keyboard on: ${this.id || 'unnamed'}`);
      handleAuthTabToggle(this);
    }
  });
  
  // Ë®≠ÂÆöÂÆå‰∫Ü„Éû„Éº„ÇØ
  tabElement.dataset.manualTabSetup = 'true';
  console.log(`‚úÖ Manual tab set up for: ${tabElement.id || 'unnamed'}`);
}

// Ë™çË®º„Çø„ÉñÂàá„ÇäÊõø„ÅàÂá¶ÁêÜÔºàÊîπÂñÑÁâàÔºâ
function handleAuthTabToggle(tabElement) {
  console.log(`üîÑ [AuthTab] === Starting tab toggle for: ${tabElement.id || 'unnamed'} ===`);
  
  const targetSelector = tabElement.getAttribute('data-bs-target') || tabElement.getAttribute('href');
  console.log(`üîÑ [AuthTab] Target selector: ${targetSelector}`);
  
  if (!targetSelector) {
    console.error('‚ùå [AuthTab] No target selector found');
    return;
  }
  
  const targetPane = document.querySelector(targetSelector);
  console.log(`üîÑ [AuthTab] Target pane found: ${!!targetPane}`);
  
  if (!targetPane) {
    console.error(`‚ùå [AuthTab] Target pane not found: ${targetSelector}`);
    return;
  }
  
  try {
    // Âêå‰∏Ä„Ç∞„É´„Éº„Éó„ÅÆÂÖ®„Çø„Éñ„ÇíÈùû„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ
    const tabContainer = tabElement.closest('.nav-tabs');
    if (tabContainer) {
      console.log('üîÑ [AuthTab] Deactivating all tabs in container');
      const allTabs = tabContainer.querySelectorAll('.nav-link');
      allTabs.forEach(tab => {
        tab.classList.remove('active');
        tab.setAttribute('aria-selected', 'false');
        tab.style.backgroundColor = ''; // „Éû„Ç¶„Çπ„Ç™„Éº„Éê„ÉºËâ≤„Çí„É™„Çª„ÉÉ„Éà
        console.log(`  ‚ûñ Deactivated: ${tab.id || 'unnamed'}`);
      });
      
      // ÂØæÂøú„Åô„Çã„Çø„Éñ„Éë„Éç„É´„ÇÇÈùû„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ
      const allPanes = document.querySelectorAll('.tab-pane');
      allPanes.forEach(pane => {
        pane.classList.remove('show', 'active');
        console.log(`  ‚ûñ Pane deactivated: ${pane.id || 'unnamed'}`);
      });
    }
    
    // ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Éñ„Çí„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ
    tabElement.classList.add('active');
    tabElement.setAttribute('aria-selected', 'true');
    console.log(`‚úÖ [AuthTab] Tab activated: ${tabElement.id || 'unnamed'}`);
    
    // ÂØæÂøú„Åô„Çã„Çø„Éñ„Éë„Éç„É´„Çí„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ
    targetPane.classList.add('show', 'active');
    console.log(`‚úÖ [AuthTab] Pane activated: ${targetPane.id || 'unnamed'}`);
    
    // „Éë„Çπ„Ç≥„Éº„Éâ„Çø„Éñ„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Ç∑„Éß„É≥ÁâπÂÆöÂá¶ÁêÜ
    if (tabElement.id === 'passcode-tab') {
      console.log('üéØ [AuthTab] === PASSCODE TAB ACTIVATED ===');
      
      // „Éë„Çπ„Ç≥„Éº„ÉâÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„Å´„Éï„Ç©„Éº„Ç´„ÇπÔºàUXÂêë‰∏äÔºâ
      setTimeout(() => {
        const emailField = targetPane.querySelector('input[type="email"]');
        if (emailField) {
          emailField.focus();
          console.log('üìß [AuthTab] Passcode email field focused');
        } else {
          console.log('‚ö†Ô∏è [AuthTab] Passcode email field not found');
        }
      }, 100);
      
      // „Éë„Çπ„Ç≥„Éº„Éâ„Éï„Ç©„Éº„É†„ÅÆ„É™„Çª„ÉÉ„Éà
      resetPasscodeForm();
    }
    
    // „Éë„Çπ„ÉØ„Éº„Éâ„Çø„Éñ„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Ç∑„Éß„É≥ÁâπÂÆöÂá¶ÁêÜ
    if (tabElement.id === 'password-tab') {
      console.log('üîë [AuthTab] === PASSWORD TAB ACTIVATED ===');
      
      setTimeout(() => {
        const emailField = targetPane.querySelector('input[type="email"]');
        if (emailField) {
          emailField.focus();
          console.log('üìß [AuthTab] Password email field focused');
        }
      }, 100);
    }
    
    console.log(`‚úÖ [AuthTab] === Tab switch completed successfully: ${tabElement.id || 'unnamed'} ===`);
    
  } catch (error) {
    console.error('‚ùå [AuthTab] Tab toggle failed:', error);
  }
}

// „Éë„Çπ„Ç≥„Éº„ÉâË™çË®ºÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
function initializePasscodeAuth() {
  const passcodeRequestForm = document.getElementById('passcode-request-form');
  if (passcodeRequestForm) {
    passcodeRequestForm.addEventListener('submit', handlePasscodeRequest);
  }

  // „Éë„Çπ„Ç≥„Éº„ÉâÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅÆÂá¶ÁêÜ
  const passcodeField = document.querySelector('input[name="temp_password_verification[temp_password]"]');
  if (passcodeField) {
    setupPasscodeField(passcodeField);
  }
}

// „Éë„Çπ„Ç≥„Éº„ÉâÈÄÅ‰ø°Âá¶ÁêÜ
function handlePasscodeRequest(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const email = formData.get('email');
  
  if (!email) {
    showAlert('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'warning');
    return;
  }
  
  console.log('üìß Requesting passcode for:', email);
  
  // „Éë„Çπ„Ç≥„Éº„ÉâÈÄÅ‰ø°Âá¶ÁêÜÔºàJSON API‰ΩøÁî®Ôºâ
  fetch(this.action, {
    method: 'POST',
    body: formData,
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(response => {
    console.log('üì° Response status:', response.status);
    console.log('üì° Response headers:', response.headers);
    
    // HTTP„Çπ„ÉÜ„Éº„Çø„Çπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (!response.ok) {
      console.error(`‚ùå HTTP Error: ${response.status} ${response.statusText}`);
      
      // „É¨„Çπ„Éù„É≥„Çπ„ÅåJSON„ÅãHTML„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        return response.json().then(data => {
          throw new Error(data.error || `„Çµ„Éº„Éê„Éº„Ç®„É©„Éº (${response.status})`);
        });
      } else {
        throw new Error(`„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº: ${response.status} ${response.statusText}`);
      }
    }
    
    // „É¨„Çπ„Éù„É≥„Çπ„Çø„Ç§„Éó„ÅÆÁ¢∫Ë™ç
    const contentType = response.headers.get('content-type');
    console.log('üì° Content-Type:', contentType);
    
    if (contentType && contentType.includes('application/json')) {
      return response.json();
    } else {
      // HTML„É¨„Çπ„Éù„É≥„ÇπÔºà„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÔºâ„ÅÆÂ†¥Âêà
      console.log('üîÑ HTML response detected, likely redirect');
      return response.text().then(html => {
        // ÊàêÂäü„Å®Ë¶ã„Å™„ÅôÔºà„É°„Éº„É´ÈÄÅ‰ø°ÂÆå‰∫ÜÂæå„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÔºâ
        return { 
          success: true, 
          message: '‰∏ÄÊôÇ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü„ÄÇ„É°„Éº„É´„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ',
          redirect_url: response.url 
        };
      });
    }
  })
  .then(data => {
    console.log('‚úÖ Response data:', data);
    
    if (data.success) {
      console.log('‚úÖ Passcode sent successfully');
      
      // redirect_url„ÅåÊèê‰æõ„Åï„Çå„ÅüÂ†¥Âêà„ÅØ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
      if (data.redirect_url) {
        console.log('üîó Redirecting to:', data.redirect_url);
        window.location.href = data.redirect_url;
        return;
      }
      
      // Step 2„ÇíË°®Á§∫Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
      const step1 = document.getElementById('passcode-step1');
      const step2 = document.getElementById('passcode-step2');
      
      if (step1 && step2) {
        step1.style.display = 'none';
        step2.style.display = 'block';
        
        const emailField = document.getElementById('passcode_verify_email');
        if (emailField) {
          emailField.value = email;
        }
        
        // „Éë„Çπ„Ç≥„Éº„ÉâÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„Å´„Éï„Ç©„Éº„Ç´„Çπ
        const passcodeField = document.querySelector('#passcode-verify-form input[name="temp_password_verification[temp_password]"]');
        if (passcodeField) {
          passcodeField.focus();
        }
      }
      
      // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
      showAlert(data.message || '‰∏ÄÊôÇ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü„ÄÇ„É°„Éº„É´„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ', 'success');
      
    } else {
      console.warn('‚ö†Ô∏è Request failed:', data.error);
      showAlert(data.error || data.message || '„Éë„Çπ„Ç≥„Éº„Éâ„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
    }
  })
  .catch(error => {
    console.error('üí• Request error:', error);
    
    // „Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    let errorMessage = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
    
    if (error.message) {
      if (error.message.includes('Failed to fetch')) {
        errorMessage = '„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
      } else if (error.message.includes('500')) {
        errorMessage = '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„Çâ„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ';
      } else if (error.message.includes('404')) {
        errorMessage = '„Éö„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Éö„Éº„Ç∏„ÇíÊõ¥Êñ∞„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ';
      } else {
        errorMessage = error.message;
      }
    }
    
    showAlert(errorMessage, 'error');
  });
}

// „Éë„Çπ„Ç≥„Éº„ÉâÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅÆË®≠ÂÆö
function setupPasscodeField(passcodeField) {
  // ÂÖ•ÂäõÂÄ§„ÅÆËá™Âãï„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  passcodeField.addEventListener('input', function(e) {
    // Êï∞Â≠ó‰ª•Â§ñ„ÇíÂâäÈô§
    this.value = this.value.replace(/[^0-9]/g, '');
    
    // 6Ê°ÅÂÖ•ÂäõÂÆå‰∫ÜÊôÇ„ÅÆË¶ñË¶ö„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
    if (this.value.length === 6) {
      this.classList.add('border-success');
      this.classList.remove('border-secondary');
      console.log('‚úÖ 6-digit passcode entered');
    } else {
      this.classList.remove('border-success');
      this.classList.add('border-secondary');
    }
  });

  // „Éö„Éº„Çπ„ÉàÊôÇ„ÅÆÂá¶ÁêÜ
  passcodeField.addEventListener('paste', function(e) {
    e.preventDefault();
    const pastedText = (e.clipboardData || window.clipboardData).getData('text');
    const numbers = pastedText.replace(/[^0-9]/g, '').slice(0, 6);
    this.value = numbers;
    
    // input„Ç§„Éô„É≥„Éà„Çí„Éà„É™„Ç¨„Éº
    const event = new Event('input', { bubbles: true });
    this.dispatchEvent(event);
    
    console.log('üìã Passcode pasted and formatted');
  });
  
  // „Éï„Ç©„Éº„Ç´„ÇπÊôÇ„Å´ÂÖ®ÈÅ∏Êäû
  passcodeField.addEventListener('focus', function() {
    this.select();
  });
}

// „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
function initializeFormValidation() {
  const forms = document.querySelectorAll('.needs-validation');
  Array.from(forms).forEach(function(form) {
    form.addEventListener('submit', function(event) {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      form.classList.add('was-validated');
    });
  });
}

// ÂàùÊúü„Éï„Ç©„Éº„Ç´„ÇπË®≠ÂÆö
function setInitialFocus() {
  // „Éë„Çπ„ÉØ„Éº„Éâ„É≠„Ç∞„Ç§„É≥„Çø„Éñ„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™Â†¥Âêà„ÄÅ„É°„Éº„É´„Éï„Ç£„Éº„É´„Éâ„Å´„Éï„Ç©„Éº„Ç´„Çπ
  const passwordTab = document.getElementById('password-tab');
  const passwordLoginPane = document.getElementById('password-login');
  
  if (passwordTab && passwordTab.classList.contains('active')) {
    setTimeout(() => {
      const emailField = passwordLoginPane.querySelector('input[type="email"]');
      if (emailField) {
        emailField.focus();
      }
    }, 100);
  }
}

// „Éë„Çπ„Ç≥„Éº„Éâ„Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà„Åô„ÇãÈñ¢Êï∞
function resetPasscodeForm() {
  console.log('üîÑ Resetting passcode form');
  document.getElementById('passcode-step2').style.display = 'none';
  document.getElementById('passcode-step1').style.display = 'block';
  
  const form = document.getElementById('passcode-request-form');
  if (form) {
    form.reset();
    const emailField = form.querySelector('input[type="email"]');
    if (emailField) {
      emailField.focus();
    }
  }
}

// „Ç¢„É©„Éº„ÉàË°®Á§∫Èñ¢Êï∞
function showAlert(message, type = 'info') {
  console.log(`üîî Alert [${type}]: ${message}`);
  
  // Bootstrap Toast „ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ‰ΩøÁî®
  if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
    showBootstrapToast(message, type);
    return;
  }
  
  // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÊîπËâØ„Åï„Çå„Åü„Ç¢„É©„Éº„ÉàË°®Á§∫
  showCustomAlert(message, type);
}

// Bootstrap ToastË°®Á§∫
function showBootstrapToast(message, type) {
  try {
    // ToastÁî®„ÅÆHTML„ÇíÂãïÁöÑÁîüÊàê
    const toastHtml = `
      <div class="toast align-items-center text-white bg-${getBootstrapColorClass(type)} border-0" 
           role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            ${escapeHtml(message)}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                  data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    `;
    
    // Toast „Ç≥„É≥„ÉÜ„Éä„ÇíÂèñÂæó„Åæ„Åü„ÅØ‰ΩúÊàê
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toast-container';
      toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
      toastContainer.style.zIndex = '9999';
      document.body.appendChild(toastContainer);
    }
    
    // ToastË¶ÅÁ¥†„ÇíËøΩÂä†
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    const toastElement = toastContainer.lastElementChild;
    
    // Bootstrap Toast „Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê„ÉªË°®Á§∫
    const toast = new bootstrap.Toast(toastElement, {
      autohide: true,
      delay: type === 'error' ? 8000 : 5000
    });
    
    toast.show();
    
    // Ë°®Á§∫Âæå„Å´Ë¶ÅÁ¥†„ÇíÂâäÈô§
    toastElement.addEventListener('hidden.bs.toast', () => {
      toastElement.remove();
    });
    
    console.log('‚úÖ Bootstrap Toast displayed');
    
  } catch (error) {
    console.error('‚ùå Bootstrap Toast error:', error);
    showCustomAlert(message, type);
  }
}

// „Ç´„Çπ„Çø„É†„Ç¢„É©„Éº„ÉàË°®Á§∫Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
function showCustomAlert(message, type) {
  // „Ç´„Çπ„Çø„É†„Ç¢„É©„Éº„Éà„Éú„ÉÉ„ÇØ„Çπ„Çí‰ΩúÊàê
  const alertBox = document.createElement('div');
  alertBox.className = `alert alert-${getBootstrapColorClass(type)} alert-dismissible fade show position-fixed`;
  alertBox.style.cssText = 'top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px; max-width: 500px;';
  alertBox.setAttribute('role', 'alert');
  
  alertBox.innerHTML = `
    ${escapeHtml(message)}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
  
  document.body.appendChild(alertBox);
  
  // Ëá™ÂãïÂâäÈô§
  setTimeout(() => {
    if (alertBox.parentNode) {
      alertBox.classList.remove('show');
      setTimeout(() => alertBox.remove(), 150);
    }
  }, type === 'error' ? 8000 : 5000);
  
  console.log('‚úÖ Custom alert displayed');
}

// Bootstrap „Ç´„É©„Éº„ÇØ„É©„ÇπÂèñÂæó
function getBootstrapColorClass(type) {
  switch (type) {
    case 'success': return 'success';
    case 'error': return 'danger';
    case 'warning': return 'warning';
    case 'info': return 'info';
    default: return 'primary';
  }
}

// HTML „Ç®„Çπ„Ç±„Éº„Éó
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Å®„Åó„Å¶ÂÖ¨ÈñãÔºàHTML„Åã„ÇâÂëº„Å≥Âá∫„ÅóÂèØËÉΩ„Å´„Åô„ÇãÔºâ
window.resetPasscodeForm = resetPasscodeForm;

// üî• Á∑äÊÄ•‰øÆÊ≠£: Áõ¥Êé•„Çø„Éñ„Éè„É≥„Éâ„É©„ÉºËøΩÂä†ÔºàBootstrapÂõûÈÅøÔºâ
function addDirectTabHandlers() {
  console.log('üîß [Authentication] Adding direct tab handlers...');
  
  const passcodeTab = document.getElementById('passcode-tab');
  const passwordTab = document.getElementById('password-tab');
  
  if (passcodeTab) {
    // Êó¢Â≠ò„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Çí„ÇØ„É™„Ç¢
    passcodeTab.removeAttribute('data-bs-toggle');
    
    // Áõ¥Êé•„ÇØ„É™„ÉÉ„ÇØ„Éè„É≥„Éâ„É©„Éº„ÇíËøΩÂä†
    passcodeTab.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log('üéØ [DirectHandler] Passcode tab clicked!');
      handleAuthTabToggle(this);
    });
    
    console.log('‚úÖ [DirectHandler] Direct handler added to passcode tab');
  } else {
    console.error('‚ùå [DirectHandler] Passcode tab not found!');
  }
  
  if (passwordTab) {
    // Êó¢Â≠ò„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Çí„ÇØ„É™„Ç¢
    passwordTab.removeAttribute('data-bs-toggle');
    
    // Áõ¥Êé•„ÇØ„É™„ÉÉ„ÇØ„Éè„É≥„Éâ„É©„Éº„ÇíËøΩÂä†
    passwordTab.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log('üîë [DirectHandler] Password tab clicked!');
      handleAuthTabToggle(this);
    });
    
    console.log('‚úÖ [DirectHandler] Direct handler added to password tab');
  } else {
    console.error('‚ùå [DirectHandler] Password tab not found!');
  }
}

// „Éá„Éê„ÉÉ„Ç∞Áî®: „Çø„Éñ„ÇØ„É™„ÉÉ„ÇØË®∫Êñ≠Ê©üËÉΩ
function addClickDiagnostics() {
  const passcodeTab = document.getElementById('passcode-tab');
  const passwordTab = document.getElementById('password-tab');
  
  if (passcodeTab) {
    console.log('üîç [Debug] Passcode tab element found:', passcodeTab);
    console.log('üîç [Debug] Passcode tab computed style:', window.getComputedStyle(passcodeTab));
    
    // Áõ¥Êé•„ÇØ„É™„ÉÉ„ÇØ„É™„Çπ„Éä„Éº„ÇíËøΩÂä†„Åó„Å¶Ë®∫Êñ≠
    passcodeTab.addEventListener('click', function(e) {
      console.log('üîç [Debug] Passcode tab CLICKED!', e);
      console.log('üîç [Debug] Event target:', e.target);
      console.log('üîç [Debug] Current target:', e.currentTarget);
    }, true); // „Ç≠„É£„Éó„ÉÅ„É£„Éï„Çß„Éº„Ç∫„ÅßÁ¢∫ÂÆü„Å´ÊçïÊçâ
    
    // „Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà„ÇÇÁõ£Ë¶ñ
    passcodeTab.addEventListener('mouseenter', () => {
      console.log('üîç [Debug] Mouse entered passcode tab');
    });
    
    passcodeTab.addEventListener('mouseleave', () => {
      console.log('üîç [Debug] Mouse left passcode tab');
    });
    
    console.log('‚úÖ [Debug] Click diagnostics added to passcode tab');
  } else {
    console.error('‚ùå [Debug] Passcode tab element NOT FOUND!');
  }
  
  if (passwordTab) {
    passwordTab.addEventListener('click', function(e) {
      console.log('üîç [Debug] Password tab clicked for comparison', e);
    }, true);
    console.log('‚úÖ [Debug] Click diagnostics added to password tab');
  }
}

// Ë®∫Êñ≠Ê©üËÉΩ„ÇíÈÅÖÂª∂ÂÆüË°å
setTimeout(() => {
  console.log('üîç [Debug] Running click diagnostics...');
  addClickDiagnostics();
}, 500);

console.log("‚úÖ Authentication JavaScript module loaded successfully");