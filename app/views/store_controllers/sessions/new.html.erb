<% content_for :title, "ログイン" %>

<h2 class="h4 mb-4 text-center">
  <i class="bi bi-shield-lock me-2"></i>
  店舗スタッフログイン
</h2>

<!-- パスコード専用認証フロー -->
<% if @store %>
  <!-- Step 1: メールアドレス入力 -->
  <div id="email-auth-step1">
    <%= form_with url: store_request_temp_password_path(store_slug: @store.slug), local: false, id: "passcode-request-form" do |f| %>
      <div class="mb-3">
        <%= f.label :email, class: "form-label" do %>
          <i class="bi bi-envelope me-1"></i>
          メールアドレス
        <% end %>
        <%= f.email_field :email, 
                          autofocus: true,
                          autocomplete: "email",
                          class: "form-control form-control-lg",
                          placeholder: "email@example.com",
                          required: true %>
        <div class="form-text">
          登録されているメールアドレスを入力してください。<br>
          6桁のパスコードをメールで送信します。
        </div>
      </div>

      <div class="d-grid mb-3">
        <%= f.submit "パスコードを送信", 
                     class: "btn btn-success btn-lg",
                     data: { turbo: false } %>
      </div>
    <% end %>
  </div>

  <!-- Step 2: パスコード入力（送信後に表示） -->
  <div id="email-auth-step2" style="display: none;">
    <%= form_with url: store_verify_temp_password_path(store_slug: @store.slug), local: true, id: "passcode-verify-form" do |f| %>
      <%= f.hidden_field :email, id: "verify-email" %>
      
      <div class="alert alert-success mb-4" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        <span id="passcode-sent-message">パスコードを送信しました。メールをご確認ください。</span>
      </div>
      
      <div class="mb-3">
        <%= f.label :temp_password, class: "form-label" do %>
          <i class="bi bi-shield-lock me-1"></i>
          パスコード
        <% end %>
        <%= f.text_field :temp_password, 
                         autocomplete: "one-time-code",
                         class: "form-control form-control-lg text-center",
                         placeholder: "123456",
                         maxlength: 6,
                         pattern: "[0-9]{6}",
                         required: true,
                         style: "font-size: 24px; letter-spacing: 8px;" %>
        <div class="form-text">
          メールに記載された6桁の数字を入力してください。
        </div>
      </div>

      <div class="d-grid mb-3">
        <%= f.submit "ログイン", 
                     class: "btn btn-primary btn-lg",
                     data: { turbo: false } %>
      </div>

      <div class="text-center">
        <a href="#" id="resend-passcode" class="text-decoration-none">
          <i class="bi bi-arrow-repeat me-1"></i>
          パスコードを再送信
        </a>
      </div>
    <% end %>
  </div>
<% else %>
  <div class="alert alert-warning" role="alert">
    <i class="bi bi-exclamation-triangle me-2"></i>
    店舗が選択されていません。<a href="<%= store_selection_path %>">店舗を選択</a>してください。
  </div>
<% end %>

<%# セキュリティ情報 %>
<div class="mt-4 p-3 bg-light rounded">
  <h6 class="text-muted mb-2">
    <i class="bi bi-shield-check me-1"></i>
    セキュリティ情報
  </h6>
  <ul class="small text-muted mb-0">
    <li>パスコードは15分間有効です</li>
    <li>パスコードは1回限り使用可能です</li>
    <li>メールが届かない場合は迷惑メールフォルダをご確認ください</li>
    <li>5回連続で失敗するとパスコードは無効になります</li>
  </ul>
</div>

<script>
// Turbo対応のパスコード認証フロー
document.addEventListener('turbo:load', function() {
  console.log('🔐 Passcode authentication page loaded');
  
  // パスコード送信フォーム
  const requestForm = document.getElementById('passcode-request-form');
  if (requestForm) {
    requestForm.addEventListener('submit', function(e) {
      e.preventDefault();
      console.log('📧 Requesting passcode...');
      
      const emailInput = requestForm.querySelector('input[type="email"]');
      if (!emailInput) {
        console.error('Email input not found');
        return;
      }
      
      const email = emailInput.value;
      const formData = new FormData(requestForm);
      
      // 送信ボタンを無効化
      const submitButton = requestForm.querySelector('input[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.value = '送信中...';
      }
      
      // Ajax送信
      fetch(requestForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        console.log('Response status:', response.status);
        return response.json();
      })
      .then(data => {
        console.log('Response data:', data);
        if (data.success) {
          // Step 2を表示
          document.getElementById('email-auth-step1').style.display = 'none';
          document.getElementById('email-auth-step2').style.display = 'block';
          
          // メールアドレスを設定
          document.getElementById('verify-email').value = email;
          
          // メッセージ更新
          document.getElementById('passcode-sent-message').innerHTML = 
            `<i class="bi bi-check-circle me-2"></i>${email} にパスコードを送信しました。<br>メールをご確認ください。`;
          
          // パスコード入力フィールドにフォーカス
          const passcodeInput = document.querySelector('#email-auth-step2 input[name="temp_password"]');
          if (passcodeInput) {
            passcodeInput.focus();
          }
        } else {
          alert(data.message || 'エラーが発生しました。もう一度お試しください。');
          // ボタンを有効化
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.value = 'パスコードを送信';
          }
        }
      })
      .catch(error => {
        console.error('Fetch error:', error);
        alert('通信エラーが発生しました。もう一度お試しください。');
        // ボタンを有効化
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.value = 'パスコードを送信';
        }
      });
    });
  }
  
  // パスコード再送信
  const resendLink = document.getElementById('resend-passcode');
  if (resendLink) {
    resendLink.addEventListener('click', function(e) {
      e.preventDefault();
      
      if (confirm('パスコードを再送信しますか？')) {
        // Step 1に戻る
        document.getElementById('email-auth-step1').style.display = 'block';
        document.getElementById('email-auth-step2').style.display = 'none';
        
        // メールアドレスを保持
        const email = document.getElementById('verify-email').value;
        const emailInput = document.querySelector('#email-auth-step1 input[type="email"]');
        if (emailInput && email) {
          emailInput.value = email;
        }
      }
    });
  }
  
  // パスコード入力の自動フォーマット
  const passcodeInput = document.querySelector('input[name="temp_password"]');
  if (passcodeInput) {
    passcodeInput.addEventListener('input', function(e) {
      // 数字以外を削除
      this.value = this.value.replace(/[^0-9]/g, '');
    });
  }
});

// TODO: 🟡 Phase 3（推奨）- UX改善
// - パスコード入力時の自動送信（6桁入力完了時）
// - カウントダウンタイマー表示（有効期限）
// - パスコード入力フィールドの分割表示（1桁ずつ）
// 横展開: 他の認証画面でも同様のUX改善適用
</script>