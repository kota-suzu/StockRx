<% content_for :title, "ログイン" %>

<style>
  /* モダンなグラデーション背景 */
  .gradient-bg {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }
  
  /* カード影効果 */
  .card-shadow {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  /* パスコード入力フィールド */
  .passcode-input {
    font-size: 2rem;
    letter-spacing: 1rem;
    text-align: center;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;
  }
  
  /* アニメーション */
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-slide-up {
    animation: slideUp 0.5s ease-out;
  }
  
  /* ローディングスピナー */
  .spinner {
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top: 3px solid white;
    width: 20px;
    height: 20px;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* フォーカス時のグロー効果 */
  .glow-focus:focus {
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.4);
  }
</style>

<div class="min-h-screen gradient-bg flex items-center justify-center px-4 py-12">
  <div class="max-w-md w-full animate-slide-up">
    <!-- ロゴとタイトル -->
    <div class="text-center mb-8">
      <div class="inline-flex items-center justify-center w-20 h-20 bg-white rounded-full shadow-lg mb-4">
        <i class="bi bi-shield-lock text-3xl text-purple-600"></i>
      </div>
      <h1 class="text-3xl font-bold text-white mb-2">StockRx</h1>
      <p class="text-purple-200"><%= @store ? @store.name : "店舗ログイン" %></p>
    </div>

    <% if @store %>
      <!-- メインカード -->
      <div class="bg-white rounded-2xl card-shadow p-8">
        <!-- Step 1: メールアドレス入力 -->
        <div id="email-auth-step1">
          <div class="text-center mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">ログイン</h2>
            <p class="text-gray-600">メールアドレスを入力してパスコードを受け取る</p>
          </div>

          <%= form_with url: store_request_temp_password_path(store_slug: @store.slug), 
                        local: false, 
                        id: "passcode-request-form",
                        class: "space-y-6" do |f| %>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                メールアドレス
              </label>
              <%= f.email_field :email, 
                                autofocus: true,
                                autocomplete: "email",
                                class: "w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-purple-500 focus:outline-none glow-focus transition-all duration-200",
                                placeholder: "email@example.com",
                                required: true %>
            </div>

            <div>
              <%= f.submit "パスコードを送信", 
                           id: "submit-email",
                           class: "w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-purple-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-all duration-200 cursor-pointer" %>
            </div>
          <% end %>

          <div class="mt-6 text-center">
            <p class="text-sm text-gray-600">
              <i class="bi bi-info-circle"></i>
              6桁のパスコードがメールで送信されます
            </p>
          </div>
        </div>

        <!-- Step 2: パスコード入力 -->
        <div id="email-auth-step2" style="display: none;">
          <div class="text-center mb-6">
            <div class="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
              <i class="bi bi-envelope-check text-2xl text-green-600"></i>
            </div>
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">パスコードを入力</h2>
            <p class="text-gray-600" id="passcode-sent-message">
              パスコードを送信しました
            </p>
          </div>

          <%= form_with url: store_verify_temp_password_path(store_slug: @store.slug), 
                        local: true, 
                        id: "passcode-verify-form",
                        class: "space-y-6" do |f| %>
            <%= f.hidden_field :email, id: "verify-email" %>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                6桁のパスコード
              </label>
              <%= f.text_field :temp_password, 
                               autocomplete: "one-time-code",
                               class: "w-full px-4 py-4 rounded-lg border-2 border-gray-300 focus:border-purple-500 focus:outline-none glow-focus transition-all duration-200 passcode-input",
                               placeholder: "······",
                               maxlength: 6,
                               pattern: "[0-9]{6}",
                               inputmode: "numeric",
                               required: true %>
            </div>

            <div>
              <%= f.submit "ログイン", 
                           id: "submit-passcode",
                           class: "w-full bg-gradient-to-r from-green-600 to-teal-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-green-700 hover:to-teal-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-all duration-200 cursor-pointer" %>
            </div>
          <% end %>

          <div class="mt-6 text-center">
            <button id="resend-passcode" class="text-purple-600 hover:text-purple-700 font-medium text-sm">
              <i class="bi bi-arrow-repeat"></i>
              パスコードを再送信
            </button>
          </div>
        </div>

        <!-- ローディング状態 -->
        <div id="loading-state" style="display: none;">
          <div class="text-center py-12">
            <div class="spinner mx-auto mb-4"></div>
            <p class="text-gray-600">処理中...</p>
          </div>
        </div>
      </div>

      <!-- セキュリティ情報 -->
      <div class="mt-8 text-center">
        <div class="inline-flex items-center text-white/80 text-sm">
          <i class="bi bi-shield-check mr-2"></i>
          <span>安全な接続で保護されています</span>
        </div>
      </div>
    <% else %>
      <!-- 店舗未選択 -->
      <div class="bg-white rounded-2xl card-shadow p-8">
        <div class="text-center">
          <div class="inline-flex items-center justify-center w-16 h-16 bg-yellow-100 rounded-full mb-4">
            <i class="bi bi-exclamation-triangle text-2xl text-yellow-600"></i>
          </div>
          <h2 class="text-xl font-semibold text-gray-800 mb-2">店舗が選択されていません</h2>
          <p class="text-gray-600 mb-6">ログインする店舗を選択してください</p>
          <%= link_to store_selection_path, 
                      class: "inline-flex items-center px-6 py-3 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition-colors duration-200" do %>
            <i class="bi bi-shop mr-2"></i>
            店舗を選択
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
document.addEventListener('turbo:load', function() {
  console.log('🎨 Modern passcode authentication loaded');
  
  const step1 = document.getElementById('email-auth-step1');
  const step2 = document.getElementById('email-auth-step2');
  const loadingState = document.getElementById('loading-state');
  const requestForm = document.getElementById('passcode-request-form');
  const passcodeInput = document.querySelector('input[name="temp_password"]');
  
  // メール送信フォーム
  if (requestForm) {
    requestForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const emailInput = requestForm.querySelector('input[type="email"]');
      const submitButton = document.getElementById('submit-email');
      const originalText = submitButton.value;
      
      // ローディング状態
      submitButton.value = '送信中...';
      submitButton.disabled = true;
      submitButton.classList.add('opacity-70', 'cursor-not-allowed');
      
      const formData = new FormData(requestForm);
      
      fetch(requestForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Step 2に遷移
          step1.style.display = 'none';
          step2.style.display = 'block';
          step2.classList.add('animate-slide-up');
          
          // メールアドレス設定
          document.getElementById('verify-email').value = emailInput.value;
          document.getElementById('passcode-sent-message').innerHTML = 
            `<i class="bi bi-check-circle text-green-600"></i> ${emailInput.value} に送信しました`;
          
          // パスコード入力にフォーカス
          if (passcodeInput) {
            passcodeInput.focus();
          }
        } else {
          alert(data.message || 'エラーが発生しました');
          submitButton.value = originalText;
          submitButton.disabled = false;
          submitButton.classList.remove('opacity-70', 'cursor-not-allowed');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('通信エラーが発生しました');
        submitButton.value = originalText;
        submitButton.disabled = false;
        submitButton.classList.remove('opacity-70', 'cursor-not-allowed');
      });
    });
  }
  
  // パスコード入力の自動フォーマット
  if (passcodeInput) {
    passcodeInput.addEventListener('input', function(e) {
      // 数字以外を削除
      this.value = this.value.replace(/[^0-9]/g, '');
      
      // 6桁入力完了時の自動送信（オプション）
      if (this.value.length === 6) {
        // 自動送信を有効にする場合はコメントアウトを解除
        // document.getElementById('passcode-verify-form').submit();
      }
    });
    
    // ペースト時の処理
    passcodeInput.addEventListener('paste', function(e) {
      e.preventDefault();
      const pastedText = (e.clipboardData || window.clipboardData).getData('text');
      const numbers = pastedText.replace(/[^0-9]/g, '').slice(0, 6);
      this.value = numbers;
    });
  }
  
  // 再送信ボタン
  const resendButton = document.getElementById('resend-passcode');
  if (resendButton) {
    resendButton.addEventListener('click', function(e) {
      e.preventDefault();
      
      if (confirm('パスコードを再送信しますか？')) {
        // Step 1に戻る
        step2.style.display = 'none';
        step1.style.display = 'block';
        step1.classList.add('animate-slide-up');
        
        // メールアドレスを保持
        const email = document.getElementById('verify-email').value;
        const emailInput = document.querySelector('#email-auth-step1 input[type="email"]');
        if (emailInput && email) {
          emailInput.value = email;
        }
      }
    });
  }
  
  // フォーム送信時のローディング表示
  const verifyForm = document.getElementById('passcode-verify-form');
  if (verifyForm) {
    verifyForm.addEventListener('submit', function() {
      const submitButton = document.getElementById('submit-passcode');
      submitButton.value = 'ログイン中...';
      submitButton.disabled = true;
      submitButton.classList.add('opacity-70', 'cursor-not-allowed');
    });
  }
});
</script>