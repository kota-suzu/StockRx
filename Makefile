# ============================================================================
# StockRx ‚Äì Makefile (Refactored 2025-05-26)
# Practical, DRY, and developer-friendly. Less yak-shaving, more coding.
# ----------------------------------------------------------------------------
# ‰Ωø„ÅÑÊñπ: `make <target>` „ÅßÂÆüË°å„ÄÇ‰æã: `make up`, `make test-models` Á≠â
# ============================================================================

# --------------------------- Â§âÊï∞ÂÆöÁæ© --------------------------------------
SHELL            := /usr/bin/env bash
COMPOSE          := docker compose
WEB_RUN          := $(COMPOSE) run --rm web
WEB_UP           := $(COMPOSE) up -d
HTTP_PORT        ?= 3000
RSPEC            := $(COMPOSE) run --rm -e RAILS_ENV=test -e DISABLE_HOST_AUTHORIZATION=true web bundle exec rspec
BUNDLE           := $(WEB_RUN) bundle
CURL             := curl -s -o /dev/null

# --------------------------- „Éò„É´„Éë„ÉºÈñ¢Êï∞ ----------------------------------
define check_health
	@echo "=== „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ: http://localhost:$(HTTP_PORT) ==="
	@if $(CURL) http://localhost:$(HTTP_PORT); then \
	  echo "‚úÖ Web„Çµ„Éº„Éê„ÉºÊ≠£Â∏∏Á®ºÂÉç"; \
	else \
	  echo "‚ùå Web„Çµ„Éº„Éê„ÉºÊé•Á∂öÂ§±Êïó ‚Äî \e[33m$(COMPOSE) logs web\e[0m „ÅßÁ¢∫Ë™ç"; \
	fi
endef

# --------------------------- „Éá„Éï„Ç©„É´„Éà„Çø„Éº„Ç≤„ÉÉ„Éà --------------------------
.DEFAULT_GOAL := help

# --------------------------- PHONY „Çø„Éº„Ç≤„ÉÉ„Éà ------------------------------
.PHONY: build up down restart server logs ps clean \
        db-create db-migrate db-reset db-seed db-setup \
        setup services-health-check bundle-install test rspec \
        test-fast test-models test-requests test-jobs test-features test-integration \
        test-failed test-parallel test-coverage test-profile test-skip-heavy \
        test-unit-fast test-models-only \
        ci ci-github security-scan security-scan-github lint lint-github lint-fix lint-fix-unsafe test-all test-github \
        console routes backup restore help diagnose fix-connection fix-ssl-error \
        perf-generate-csv perf-test-import perf-benchmark-batch test-error-handling

# --------------------------- Docker Âü∫Êú¨Êìç‰Ωú -------------------------------
build:
	$(COMPOSE) build

up:
	$(WEB_UP)
	@sleep 3
	$(call check_health)

down:
	$(COMPOSE) down

restart:
	$(COMPOSE) restart

server: up
	@echo "üöÄ ÈñãÁô∫„Çµ„Éº„Éê„ÉºËµ∑ÂãïÂÆå‰∫Ü ‚Äì http://localhost:$(HTTP_PORT)"

logs:
	$(COMPOSE) logs -f

ps:
	$(COMPOSE) ps

clean:
	$(COMPOSE) down -v
	docker system prune -f

# --------------------------- ÂàùÊúü„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó ------------------------------
# TODO: „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂá¶ÁêÜ„ÅÆÂ†ÖÁâ¢ÊÄßÂêë‰∏äÔºà„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂæÖÊ©ü„ÄÅ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Ôºâ
# TODO: ÊÆµÈöéÁöÑ„Å™„Çµ„Éº„Éì„ÇπËµ∑Âãï„Å®„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁ¢∫Ë™ç
setup: services-health-check bundle-install db-setup

services-health-check:
	@echo "=== „Çµ„Éº„Éì„ÇπËµ∑Âãï„Å®„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ ==="
	$(COMPOSE) up -d db redis
	@echo "MySQLÂàùÊúüÂåñÂæÖÊ©ü‰∏≠..."
	@for i in {1..30}; do \
		if docker compose exec -T db mysqladmin ping -h localhost -u root -ppassword > /dev/null 2>&1; then \
			echo "‚úÖ MySQLËµ∑ÂãïÂÆå‰∫Ü"; \
			break; \
		fi; \
		echo "MySQLÂàùÊúüÂåñ‰∏≠... ($$i/30)"; \
		sleep 2; \
	done

bundle-install:
	mkdir -p tmp/bundle_cache && chmod -R 777 tmp/bundle_cache
	$(BUNDLE) config set frozen false
	$(BUNDLE) install

# --------------------------- „Éá„Éº„Çø„Éô„Éº„ÇπÊìç‰Ωú ------------------------------
db-%:
	$(WEB_RUN) bin/rails db:$*

# „Ç®„Ç§„É™„Ç¢„Çπ - TODO: Âæ™Áí∞ÂèÇÁÖß„ÅÆ‰øÆÊ≠£ÂÆå‰∫Ü„ÄÅdb:*„Çø„Çπ„ÇØ„Å∏„ÅÆÈÅ©Âàá„Å™Ëª¢ÈÄÅ
.db-aliases: ;
# ‰ª•‰∏ã„ÅØ‰∏çË¶Å„Å™Âæ™Áí∞ÂèÇÁÖß„Ç®„Ç§„É™„Ç¢„Çπ„ÇíÂâäÈô§„Åó„ÄÅÁõ¥Êé•ÁöÑ„Å™‰æùÂ≠ò„Å´Â§âÊõ¥

# --------------------------- „ÉÜ„Çπ„Éà ----------------------------------------
# TODO: Host AuthorizationÂØæÁ≠ñ - ÂÖ®„ÉÜ„Çπ„Éà„ÅßDISABLE_HOST_AUTHORIZATION=true„ÇíË®≠ÂÆö
# Ê†πÊú¨ÁöÑËß£Ê±∫: Makefile„É¨„Éô„É´„ÅßÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„ÄÅ403 Blocked host„Ç®„É©„Éº„ÇíÂÆåÂÖ®ÂõûÈÅø
# Ê®™Â±ïÈñãÁ¢∫Ë™ç: CI/CDÁí∞Â¢É„Åß„ÇÇÂêåÊßò„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å
# ÂÖ±ÈÄöÈñ¢Êï∞
define run_rspec
	@echo "=== $(1) „ÉÜ„Çπ„ÉàÂÆüË°å ===";
	$(RSPEC) $(2) --format $(3)
endef

# „É°„Çø„Çø„Éº„Ç≤„ÉÉ„Éà
TEST_DOC      := documentation
TEST_PROGRESS := progress

test: rspec

rspec:
	$(RSPEC)

test-fast:
	$(call run_rspec,È´òÈÄü, spec/models spec/requests spec/helpers spec/decorators spec/validators, $(TEST_PROGRESS))

test-models:
	$(call run_rspec,„É¢„Éá„É´, spec/models, $(TEST_DOC))

test-requests:
	$(call run_rspec,„É™„ÇØ„Ç®„Çπ„Éà, spec/requests, $(TEST_DOC))

test-jobs:
	$(call run_rspec,„Ç∏„Éß„Éñ, spec/jobs, $(TEST_DOC))

test-features:
	$(call run_rspec,„Éï„Ç£„Éº„ÉÅ„É£, spec/features, $(TEST_PROGRESS))

test-integration:
	$(call run_rspec,Áµ±Âêà, spec/features spec/jobs, $(TEST_PROGRESS))

test-failed:
	$(RSPEC) --only-failures --format $(TEST_DOC)

test-parallel:
	$(COMPOSE) run --rm -e RAILS_ENV=test -e DISABLE_HOST_AUTHORIZATION=true web bundle exec parallel_rspec spec/models spec/requests spec/helpers spec/decorators

test-coverage:
	@echo "=== „Ç´„Éê„É¨„ÉÉ„Ç∏Ë®àÊ∏¨‰ªò„Åç„ÉÜ„Çπ„ÉàÂÆüË°å ==="
	$(COMPOSE) run --rm -e RAILS_ENV=test -e DISABLE_HOST_AUTHORIZATION=true -e COVERAGE=true web bundle exec rspec && echo "üìä „Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„Éà: coverage/index.html"

test-profile:
	$(RSPEC) --profile 10

test-skip-heavy:
	$(RSPEC) --tag ~slow --tag ~integration --tag ~js --format $(TEST_PROGRESS)

test-unit-fast:
	$(call run_rspec,ËªΩÈáè„É¶„Éã„ÉÉ„Éà, spec/models spec/helpers spec/decorators spec/validators spec/jobs --tag ~slow, $(TEST_PROGRESS))

test-models-only:
	$(call run_rspec,„É¢„Éá„É´ÈôêÂÆö, spec/models spec/helpers spec/decorators spec/validators, $(TEST_PROGRESS))

# --------------------------- CI / Lint / Security -------------------------
# GitHub ActionsÂÆåÂÖ®‰∫íÊèõ„ÅÆCI„Ç≥„Éû„É≥„Éâ
ci-github: bundle-install security-scan-github lint-github test-github

# ÂæìÊù•„ÅÆCI„Ç≥„Éû„É≥„ÉâÔºàÂæåÊñπ‰∫íÊèõÊÄßÔºâ
ci: bundle-install security-scan lint test-all

# TODO: üî¥ Phase 1 - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥Ê©üËÉΩÂº∑ÂåñÔºàÊé®ÂÆö1Êó•Ôºâ
# ÂÑ™ÂÖàÂ∫¶: ÊúÄÈ´òÔºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âü∫Áõ§Ôºâ
# ÂÆüË£ÖÂÜÖÂÆπ:
#   - Dependency-Check (OWASP) Áµ±Âêà
#   - SAST (Static Application Security Testing) Ëá™ÂãïÂÆüË°å
#   - ËÑÜÂº±ÊÄß„É¨„Éù„Éº„ÉàÁîüÊàê„Å®SlackÈÄöÁü•
#   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éô„Éº„Çπ„É©„Ç§„É≥Ê§úË®º
# Ê®™Â±ïÈñãÁ¢∫Ë™ç:
#   - CI/CD„Éë„Ç§„Éó„É©„Ç§„É≥„Å∏„ÅÆÁµ±Âêà
#   - „Éó„É™„Ç≥„Éü„ÉÉ„Éà„Éï„ÉÉ„ÇØ„Åß„ÅÆËªΩÈáè„ÉÅ„Çß„ÉÉ„ÇØ
#   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å∏„ÅÆ„Éá„Éº„ÇøÈÄÅ‰ø°

# GitHub Actions‰∫íÊèõ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
security-scan-github:
	@echo "=== GitHub Actions‰∫íÊèõ - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥ ==="
	$(WEB_RUN) bin/brakeman --no-pager
	@echo "=== bundler-auditËÑÜÂº±ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ ==="
	$(WEB_RUN) bundle exec bundle-audit check --update
	# TODO: üü† Phase 2 - ËøΩÂä†„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÑ„Éº„É´Áµ±ÂêàÔºàÊé®ÂÆö2Êó•Ôºâ
	# ÂÆüË£Ö‰∫àÂÆö:
	#   - bundle exec bundle-audit check --ignore CVE-XXXX-YYYY
	#   - bundle exec semgrep --config=p/security-audit --json
	#   - bundle exec rails_best_practices --format json
	#   - bundle exec rubocop --only Security --format json

# GitHub Actions‰∫íÊèõ„ÅÆLint
lint-github:
	@echo "=== GitHub Actions‰∫íÊèõ - Lint ==="
	$(WEB_RUN) bin/rubocop -f github

# TODO: üü¢ Phase 3 - Áµ±Âêà„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É¨„Éù„Éº„ÉàÔºàÊé®ÂÆö3Êó•Ôºâ
# ÂÑ™ÂÖàÂ∫¶: ‰∏≠ÔºàÈÅãÁî®ÂäπÁéáÂåñÔºâ
# ÂÆüË£ÖÂÜÖÂÆπ:
#   - security-report: ÂÖ®„Çπ„Ç≠„É£„É≥ÁµêÊûú„ÅÆÁµ±ÂêàHTML/JSON„É¨„Éù„Éº„ÉàÁîüÊàê
#   - security-dashboard: „É™„Ç¢„É´„Çø„Ç§„É†„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
#   - security-baseline: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éô„Éº„Çπ„É©„Ç§„É≥Ë®≠ÂÆö„ÉªÊØîËºÉ
#   - security-remediation: ‰øÆÊ≠£ÊèêÊ°à„Å®„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„ÉàÁîüÊàê
# Ê®™Â±ïÈñãÁ¢∫Ë™ç:
#   - ÁµåÂñ∂Èô£Âêë„Åë„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çµ„Éû„É™„Éº
#   - Áõ£ÊüªÂØæÂøúÁî®„Ç®„Éì„Éá„É≥„ÇπËá™ÂãïÂèéÈõÜ
#   - SOC2/ISO27001ÂØæÂøú„É¨„Éù„Éº„ÉàÁîüÊàê

# GitHub ActionsÂÆåÂÖ®‰∫íÊèõ„ÅÆ„ÉÜ„Çπ„ÉàÂÆüË°åÔºà‰øÆÊ≠£Áâà - Pending„ÉÜ„Çπ„ÉàÂØæÂøúÔºâ
test-github:
	@echo "=== GitHub Actions‰∫íÊèõ - „ÉÜ„Çπ„ÉàÁí∞Â¢ÉÊ∫ñÂÇô ==="
	# „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÔºàGitHub Actions„Å®Âêå„ÅòÔºâ
	rm -rf tmp/cache tmp/bootsnap* tmp/caching-dev.txt || true
	mkdir -p tmp/cache/assets tmp/storage tmp/pids tmp/screenshots
	chmod -R 777 tmp/cache tmp/storage tmp/pids tmp/screenshots || true
	touch tmp/restart.txt
	
	@echo "=== GitHub Actions‰∫íÊèõ - „Çµ„Éº„Éì„ÇπÁ¢∫Ë™çÔºàÊó¢Â≠ò„Ç≥„É≥„ÉÜ„ÉäÊ¥ªÁî®Ôºâ==="
	# Êó¢Â≠ò„ÅÆ„Çµ„Éº„Éì„Çπ„ÅåÂãï‰Ωú„Åó„Å¶„ÅÑ„Çå„Å∞ÂÜçÂà©Áî®„ÄÅÂÅúÊ≠¢„Åó„Å¶„ÅÑ„Çå„Å∞Ëµ∑Âãï
	$(COMPOSE) up -d db redis
	@echo "„Çµ„Éº„Éì„ÇπËµ∑ÂãïÂæÖÊ©ü‰∏≠..."
	@for i in {1..30}; do \
		if docker compose exec -T db mysqladmin ping -h localhost -u root -ppassword > /dev/null 2>&1; then \
			echo "‚úÖ MySQLÁ®ºÂÉçÁ¢∫Ë™çÂÆå‰∫Ü"; \
			break; \
		fi; \
		echo "MySQLÁ¢∫Ë™ç‰∏≠... ($$i/30)"; \
		sleep 2; \
	done
	
	@echo "=== GitHub Actions‰∫íÊèõ - Zeitwerk„ÉÅ„Çß„ÉÉ„ÇØ ==="
	$(COMPOSE) run --rm \
	  -e RAILS_ENV=test \
	  -e CI=true \
	  web bundle exec rails zeitwerk:check || true
	
	@echo "=== GitHub Actions‰∫íÊèõ - „Éá„Éº„Çø„Éô„Éº„ÇπÊ∫ñÂÇô ==="
	$(COMPOSE) run --rm \
	  -e RAILS_ENV=test \
	  -e DATABASE_PASSWORD="password" \
	  -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 \
	  -e DISABLE_HOST_AUTHORIZATION=true \
	  -e CI=true \
	  -e TEST_DATABASE_READ_TIMEOUT=60 \
	  -e TEST_DATABASE_CONNECT_TIMEOUT=30 \
	  -e TEST_DATABASE_WRITE_TIMEOUT=30 \
	  web bin/rails db:test:prepare
	
	@echo "=== GitHub Actions‰∫íÊèõ - RSpec„ÉÜ„Çπ„ÉàÂÆüË°å ==="
	$(COMPOSE) run --rm \
	  -e RAILS_ENV=test \
	  -e DATABASE_PASSWORD="password" \
	  -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 \
	  -e DISABLE_HOST_AUTHORIZATION=true \
	  -e RAILS_ZEITWERK_MISMATCHES=error \
	  -e CI=true \
	  -e TEST_DATABASE_READ_TIMEOUT=60 \
	  -e TEST_DATABASE_CONNECT_TIMEOUT=30 \
	  -e TEST_DATABASE_WRITE_TIMEOUT=30 \
	  -e CAPYBARA_SERVER_HOST=0.0.0.0 \
	  -e CAPYBARA_SERVER_PORT=3001 \
	  -e CHROME_HEADLESS=1 \
	  -e SELENIUM_CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1024,768" \
	  web bundle exec rspec --format progress; \
	  RSPEC_EXIT_CODE=$$?; \
	  echo ""; \
	  echo "=== CIÊàêÂäüÂà§ÂÆöÔºöFailure„Åå„Å™„Åë„Çå„Å∞ÊàêÂäü ==="; \
	  if [ $$RSPEC_EXIT_CODE -eq 0 ]; then \
	    echo "‚úÖ „ÉÜ„Çπ„ÉàÂÆå‰∫Ü: „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü"; \
	    echo ""; \
	    echo "üéØ „É°„ÇøË™çÁü•ÁöÑÁ¢∫Ë™çÔºö"; \
	    echo "   - ÂÆüË£ÖÊ∏à„ÅøÊ©üËÉΩ: „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÊàêÂäü"; \
	    echo "   - PendingÊ©üËÉΩ: Â∞ÜÊù•ÂÆüË£Ö‰∫àÂÆöÔºàCLAUDE.md„ÅÆTODO„É™„Çπ„ÉàÂèÇÁÖßÔºâ"; \
	    echo "   - Ê®™Â±ïÈñãÁä∂Ê≥Å: ÂêåÊßò„ÅÆCIÊàêÂäüÂü∫Ê∫ñ„Çí‰ªñ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÇÇÈÅ©Áî®ÂèØËÉΩ"; \
	    exit 0; \
	  else \
	    echo "‚ùå „ÉÜ„Çπ„ÉàÂ§±Êïó: RSpec„Åå failures „ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü"; \
	    echo "   Exit Code: $$RSPEC_EXIT_CODE"; \
	    echo "   ‰øÆÊ≠£Âæå„Å´ÂÜçÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"; \
	    exit $$RSPEC_EXIT_CODE; \
	  fi

# ÂæìÊù•„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
security-scan:
	$(WEB_RUN) bin/brakeman --no-pager
	@echo "=== bundler-auditËÑÜÂº±ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ ==="
	$(WEB_RUN) bundle exec bundle-audit check --update
	# TODO: üîµ Phase 4 - „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ëá™Âãï‰øÆÂæ©ÔºàÊé®ÂÆö1ÈÄ±ÈñìÔºâ
	# ÂÑ™ÂÖàÂ∫¶: ‰ΩéÔºàËá™ÂãïÂåñ„ÉªÂäπÁéáÂåñÔºâ
	# ÂÆüË£ÖÂÜÖÂÆπ:
	#   - Ëá™Âãï„Éë„ÉÉ„ÉÅÈÅ©Áî® (bundle update --patch)
	#   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„ÅÆËá™ÂãïÊúÄÈÅ©Âåñ
	#   - False Positive„ÅÆÂ≠¶Áøí„Éª„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
	#   - ÂΩ±ÈüøÂ∫¶Ë©ï‰æ°„Å®ÂÑ™ÂÖàÂ∫¶‰ªò„ÅëËá™ÂãïÂåñ
	# Ê®™Â±ïÈñãÁ¢∫Ë™ç:
	#   - Êú¨Áï™Áí∞Â¢É„Å∏„ÅÆÊÆµÈöéÁöÑ„É≠„Éº„É´„Ç¢„Ç¶„Éà
	#   - Á∑äÊÄ•„Éë„ÉÉ„ÉÅÈÅ©Áî®„Éó„É≠„Çª„Çπ„ÅÆËá™ÂãïÂåñ
	#   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç§„É≥„Ç∑„Éá„É≥„ÉàÂØæÂøú„ÅÆËá™ÂãïÂåñ

lint:
	$(WEB_RUN) bin/rubocop

lint-fix:
	$(WEB_RUN) bin/rubocop -a

lint-fix-unsafe:
	$(WEB_RUN) bin/rubocop -A

test-all:
	$(COMPOSE) run --rm -e RAILS_ENV=test -e DISABLE_HOST_AUTHORIZATION=true web bin/rails db:test:prepare test test:system

# --------------------------- „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà --------------------------
perf-generate-csv:
	@echo "=== „ÉÜ„Çπ„ÉàÁî®„ÅÆ1‰∏áË°åCSV„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê ==="
	$(WEB_RUN) bin/rails performance:generate_test_csv

perf-test-import:
	@echo "=== CSV„Ç§„É≥„Éù„Éº„Éà„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„ÉàÂÆüË°å ==="
	$(WEB_RUN) bin/rails performance:test_import

perf-benchmark-batch:
	@echo "=== Áï∞„Å™„Çã„Éê„ÉÉ„ÉÅ„Çµ„Ç§„Ç∫„ÅßCSV„Ç§„É≥„Éù„Éº„Éà„Çí„Éô„É≥„ÉÅ„Éû„Éº„ÇØ ==="
	$(WEB_RUN) bin/rails performance:benchmark_batch_sizes

# --------------------------- „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÉÜ„Çπ„Éà ----------------------
test-error-handling:
	@echo "=== „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âãï‰ΩúÁ¢∫Ë™çÁî®„Çµ„Éº„Éê„ÉºËµ∑Âãï ==="
	@echo "Áí∞Â¢ÉÂ§âÊï∞ ERROR_HANDLING_TEST=1 „ÅßproductionÁí∞Â¢ÉÂêåÊßò„ÅÆ„Ç®„É©„Éº„Éö„Éº„Ç∏„ÇíË°®Á§∫"
	ERROR_HANDLING_TEST=1 $(WEB_UP)
	@sleep 3
	@echo "‰ª•‰∏ã„Åß„ÉÜ„Çπ„ÉàÂèØËÉΩ:"
	@echo "  http://localhost:$(HTTP_PORT)/404 - 404„Ç®„É©„Éº„Éö„Éº„Ç∏"
	@echo "  http://localhost:$(HTTP_PORT)/500 - 500„Ç®„É©„Éº„Éö„Éº„Ç∏"
	@echo "  http://localhost:$(HTTP_PORT)?debug=0 - „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÂàáÊõø"

# --------------------------- „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë£úÂä©Ê©üËÉΩ --------------------------
# TODO: üî¥ Phase 1 - „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áä∂Ê≥ÅÁ¢∫Ë™çÊ©üËÉΩÔºàÊé®ÂÆöÂçäÊó•Ôºâ
# ÂÑ™ÂÖàÂ∫¶: È´òÔºàÊó•Â∏∏ÈÅãÁî®„Åß„ÅÆÂÆâÂÖ®ÊÄßÁ¢∫Ë™çÔºâ
security-check:
	@echo "=== StockRx „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áä∂Ê≥ÅÁ¢∫Ë™ç ==="
	@echo "üîç 1. ÊöóÂè∑ÂåñÁä∂Ê≥Å„ÉÅ„Çß„ÉÉ„ÇØ"
	$(WEB_RUN) ruby encryption_status_check.rb
	@echo ""
	@echo "üîç 2. „Ç∏„Éß„Éñ„É≠„Ç∞„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê§úË®º"
	$(WEB_RUN) ruby verify_job_logs.rb
	@echo ""
	@echo "üîç 3. Âü∫Êú¨„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥"
	$(MAKE) security-scan

# TODO: üü† Phase 2 - Ë©≥Á¥∞„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£ÊüªÔºàÊé®ÂÆö1Êó•Ôºâ
# ÂÑ™ÂÖàÂ∫¶: ‰∏≠ÔºàÂÆöÊúüÁõ£Êüª„Éª„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„ÇπÂØæÂøúÔºâ
security-audit:
	@echo "=== StockRx Ë©≥Á¥∞„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª ==="
	@echo "üîê 1. ÂåÖÊã¨ÁöÑÊöóÂè∑ÂåñÁõ£Êüª"
	$(WEB_RUN) ruby encryption_status_check.rb
	@echo ""
	@echo "üîç 2. ËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥"
	$(MAKE) security-scan
	@echo ""
	@echo "üìä 3. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É°„Éà„É™„ÇØ„ÇπÂèéÈõÜ"
	$(WEB_RUN) ruby simple_encryption_check.rb
	@echo ""
	@echo "üéØ 4. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÜ„Çπ„ÉàÂÆüË°å"
	$(WEB_RUN) ruby test_security_job_execution.rb

# --------------------------- „Åù„ÅÆ‰ªñ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ --------------------------
console:
	$(WEB_RUN) bin/rails console

routes:
	$(WEB_RUN) bin/rails routes

backup:
	$(COMPOSE) exec db mysqldump -u root -ppassword app_db > backup/backup-$(shell date +%Y%m%d).sql

restore:
	$(COMPOSE) exec -T db mysql -u root -ppassword app_db < $(file)

# --------------------------- „Éò„É´„Éó ----------------------------------------
help:
	@echo "Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ:"
	@echo ""
	@echo "DockerÊìç‰Ωú:"
	@echo "  make build         - Docker„Ç§„É°„Éº„Ç∏„Çí„Éì„É´„Éâ"
	@echo "  make up            - „Ç≥„É≥„ÉÜ„Éä„ÇíËµ∑Âãï"
	@echo "  make down          - „Ç≥„É≥„ÉÜ„Éä„ÇíÂÅúÊ≠¢"
	@echo "  make restart       - „Ç≥„É≥„ÉÜ„Éä„ÇíÂÜçËµ∑Âãï"
	@echo "  make logs          - „É≠„Ç∞„ÇíË°®Á§∫"
	@echo "  make ps            - „Ç≥„É≥„ÉÜ„Éä„ÅÆÁä∂ÊÖã„ÇíË°®Á§∫"
	@echo "  make clean         - „Ç≥„É≥„ÉÜ„Éä„Å®„Éú„É™„É•„Éº„É†„ÇíÂâäÈô§"
	@echo ""
	@echo "„Éá„Éº„Çø„Éô„Éº„ÇπÊìç‰Ωú:"
	@echo "  make db-create     - „Éá„Éº„Çø„Éô„Éº„Çπ„Çí‰ΩúÊàê"
	@echo "  make db-migrate    - „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å"
	@echo "  make db-reset      - „Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çª„ÉÉ„Éà"
	@echo "  make bundle-install - ‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´"
	@echo ""
	@echo "„ÉÜ„Çπ„ÉàÂÆüË°å:"
	@echo "  make test          - „ÉÜ„Çπ„Éà„ÇíÂÆüË°å"
	@echo "  make test-fast     - È´òÈÄü„ÉÜ„Çπ„ÉàÂÆüË°å"
	@echo "  make test-models   - „É¢„Éá„É´„ÉÜ„Çπ„Éà„ÅÆ„Åø"
	@echo "  make test-coverage - „Ç´„Éê„É¨„ÉÉ„Ç∏Ë®àÊ∏¨‰ªò„Åç„ÉÜ„Çπ„Éà"
	@echo ""
	@echo "CI/ÂìÅË≥™ÁÆ°ÁêÜ:"
	@echo "  make ci-github     - üéØ GitHub ActionsÂÆåÂÖ®‰∫íÊèõ„ÅÆCI„ÉÜ„Çπ„Éà"
	@echo "  make ci            - ÂæìÊù•„ÅÆCI„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å"
	@echo "  make security-scan - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥„ÇíÂÆüË°å"
	@echo "  make lint          - „É™„É≥„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å"
	@echo "  make lint-fix      - ÂÆâÂÖ®„Å™Ëá™Âãï‰øÆÊ≠£„ÇíÈÅ©Áî®"
	@echo "  make lint-fix-unsafe - „Åô„Åπ„Å¶„ÅÆËá™Âãï‰øÆÊ≠£„ÇíÈÅ©Áî®ÔºàÊ≥®ÊÑèÔºöÁ†¥Â£äÁöÑÂ§âÊõ¥„ÅÆÂèØËÉΩÊÄß„ÅÇ„ÇäÔºâ"
	@echo "  make test-all      - „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"
	@echo "  make console       - Rails„Ç≥„É≥„ÇΩ„Éº„É´„ÇíËµ∑Âãï"
	@echo "  make routes        - „É´„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíË°®Á§∫"
	@echo "  make backup        - „Éá„Éº„Çø„Éô„Éº„Çπ„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó"
	@echo "  make restore file=FILE - „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉ"
	@echo "  make perf-generate-csv  - „ÉÜ„Çπ„ÉàÁî®„ÅÆ1‰∏áË°åCSV„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê"
	@echo "  make perf-test-import   - CSV„Ç§„É≥„Éù„Éº„Éà„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Çí„ÉÜ„Çπ„Éà"
	@echo "  make perf-benchmark-batch - Áï∞„Å™„Çã„Éê„ÉÉ„ÉÅ„Çµ„Ç§„Ç∫„ÅßCSV„Ç§„É≥„Éù„Éº„Éà„Çí„Éô„É≥„ÉÅ„Éû„Éº„ÇØ"
	@echo "  make test-error-handling - „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âãï‰ΩúÁ¢∫Ë™çÁî®„Çµ„Éº„Éê„ÉºËµ∑Âãï"
	@echo "  make security-check - „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áä∂Ê≥Å„ÅÆÂåÖÊã¨ÁöÑÁ¢∫Ë™ç"
	@echo "  make security-audit - Ë©≥Á¥∞„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª„ÅÆÂÆüË°å"
	@echo ""
	@echo "ÈñãÁô∫„Çµ„Éº„Éê„ÉºËµ∑ÂãïÂæå„ÅØ http://localhost:3000 „Åß„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Åß„Åô"

# --------------------------- Ë®∫Êñ≠ & ‰øÆÂæ© ----------------------------------
diagnose:
	@echo "=== StockRx „Ç∑„Çπ„ÉÜ„É†Ë®∫Êñ≠ ===" && echo
	@echo "Docker version:"
	@docker --version
	@echo "Docker Compose version:"
	@docker compose version
	@echo ""
	@echo "=== ÂÆüË°å‰∏≠„ÅÆ„Ç≥„É≥„ÉÜ„Éä ==="
	@$(COMPOSE) ps
	@echo ""
	@echo "=== „Ç≥„É≥„ÉÜ„ÉäË©≥Á¥∞ÊÉÖÂ†± ==="
	@docker ps -a --filter "name=stockrx"
	@echo ""
	@echo "=== „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ ==="
	@docker inspect stockrx-db-1 --format='{{json .State.Health}}' 2>/dev/null | jq '.' || echo "DB„Ç≥„É≥„ÉÜ„Éä„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
	@echo ""
	@echo "=== „Éú„É™„É•„Éº„É†ÊÉÖÂ†± ==="
	@docker volume ls --filter "name=stockrx"
	@echo ""
	@echo "=== „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊÉÖÂ†± ==="
	@docker network ls --filter "name=stockrx"
	@echo ""
	@echo "=== „Éù„Éº„Éà‰ΩøÁî®Áä∂Ê≥Å ==="
	@lsof -i :$(HTTP_PORT) || echo "„Éù„Éº„Éà$(HTTP_PORT)„ÅØ‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
	@echo ""
	@echo "=== HTTPÊé•Á∂ö„ÉÜ„Çπ„Éà ==="
	@if $(CURL) -I http://localhost:$(HTTP_PORT); then \
		echo "‚úÖ HTTPÊé•Á∂öÊ≠£Â∏∏"; \
	else \
		echo "‚ùå HTTPÊé•Á∂öÂ§±Êïó"; \
		echo "üîß Ëá™Âãï‰øÆÂæ©„ÇíË©¶Ë°å‰∏≠..."; \
		$(MAKE) auto-fix-connection; \
	fi
	@echo ""
	@echo "--- Web Logs (ÊúÄÊñ∞10Ë°å) ---"
	@$(COMPOSE) logs --tail=10 web || true
	@echo "--- DB Logs (ÊúÄÊñ∞10Ë°å) ---"
	@$(COMPOSE) logs --tail=10 db || true

# TODO: Ëá™Âãï‰øÆÂæ©Ê©üËÉΩ„ÅÆÂº∑Âåñ - ÊÆµÈöéÁöÑ„Å™„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞
# 1. Web„Çµ„Éº„Éê„Éº„Ç≥„É≥„ÉÜ„Éä„ÅÆÂ≠òÂú®Á¢∫Ë™ç ‚Üí Êú™Ëµ∑Âãï„Å™„ÇâËµ∑Âãï
# 2. „Çµ„Éº„Éì„Çπ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºàDB„ÄÅRedisÔºâ
# 3. „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÅÆÁ¢∫Ë™ç
# 4. „Ç®„É©„Éº„Éë„Çø„Éº„É≥„Å´Âøú„Åò„ÅüÂ∞ÇÁî®‰øÆÂæ©ÊâãÈ†Ü„ÅÆÂÆüË°å
# Ê®™Â±ïÈñã: ‰ªñ„ÅÆ„Çµ„Éº„Éì„ÇπÔºàDB„ÄÅRedisÔºâ„ÅÆËá™Âãï‰øÆÂæ©„ÇÇÂêåÊßò„ÅÆ„Éë„Çø„Éº„É≥„ÅßÂÆüË£Ö
auto-fix-connection:
	@echo "=== Ëá™Âãï‰øÆÂæ©„Éó„É≠„Çª„ÇπÈñãÂßã ==="
	@echo "1. Web„Çµ„Éº„Éê„Éº„Ç≥„É≥„ÉÜ„Éä„ÅÆÁ¢∫Ë™ç..."
	@if ! docker ps --filter "name=stockrx-web" --format "table {{.Names}}" | grep -q stockrx-web; then \
		echo "   Web„Çµ„Éº„Éê„Éº„ÅåÂÅúÊ≠¢„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇËµ∑Âãï‰∏≠..."; \
		$(COMPOSE) up -d web; \
		sleep 5; \
	else \
		echo "   Web„Çµ„Éº„Éê„Éº„Ç≥„É≥„ÉÜ„Éä„ÅØÂ≠òÂú®„Åó„Åæ„Åô„ÄÇÂÜçËµ∑Âãï‰∏≠..."; \
		$(COMPOSE) restart web; \
		sleep 5; \
	fi
	@echo "2. ‰æùÂ≠ò„Çµ„Éº„Éì„Çπ„ÅÆÁ¢∫Ë™ç..."
	@$(COMPOSE) up -d db redis
	@echo "3. „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂÜçÂÆüË°å..."
	@sleep 3
	@if $(CURL) -I http://localhost:$(HTTP_PORT); then \
		echo "‚úÖ ‰øÆÂæ©ÊàêÂäü - „Çµ„Éº„Éê„Éº„ÅåÊ≠£Â∏∏„Å´ÂøúÁ≠î„Åó„Å¶„ÅÑ„Åæ„Åô"; \
	else \
		echo "‚ùå ‰øÆÂæ©Â§±Êïó - ÊâãÂãï„Åß„ÅÆÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Åß„Åô"; \
		echo "Ê¨°„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßË©≥Á¥∞Á¢∫Ë™ç: docker compose logs web"; \
	fi

fix-connection:
	@echo "=== Êé•Á∂öÂïèÈ°å„ÅÆËá™Âãï‰øÆÂæ©„ÇíË©¶Ë°å‰∏≠... ==="
	$(COMPOSE) restart web
	@sleep 5
	$(call check_health)

fix-ssl-error:
	@echo "=== SSLÊé•Á∂ö„Ç®„É©„ÉºÂØæÂá¶ ===" && \
	  echo "ÈñãÁô∫Áí∞Â¢É„ÅØ HTTP „ÅßÂãï‰Ωú„Åó„Åæ„Åô„ÄÇ https://localhost:$(HTTP_PORT) „ÅØ‰Ωø„Çè„Åö http://localhost:$(HTTP_PORT) „Çí„ÅîÂà©Áî®‰∏ã„Åï„ÅÑ„ÄÇ"
	@echo ""
	@echo "StockRx„ÅØÈñãÁô∫Áí∞Â¢É„ÅßHTTP„ÅßÂãï‰Ωú„Åó„Åæ„Åô„ÄÇ"
	@echo ""
	@echo "Ê≠£„Åó„ÅÑ„Ç¢„ÇØ„Çª„ÇπÊñπÊ≥ï:"
	@echo "  ‚úÖ http://localhost:3000"
	@echo "  ‚ùå https://localhost:3000"
	@echo ""
	@echo "„Éñ„É©„Ç¶„Ç∂„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÊñπÊ≥ï:"
	@echo "  Chrome: Ctrl+Shift+R (Windows) / Cmd+Shift+R (Mac)"
	@echo "  Firefox: Ctrl+F5 (Windows) / Cmd+Shift+R (Mac)"