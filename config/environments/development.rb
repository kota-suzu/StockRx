<<<<<<< HEAD
=======
# frozen_string_literal: true

>>>>>>> origin/feat/claude-code-action
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded any time
  # it changes. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable caching. By default caching is disabled.
  # Run rails dev:cache to toggle caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = { "Cache-Control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  # Disable caching for Action Mailer templates even if Action Controller
  # caching is enabled.
  config.action_mailer.perform_caching = false

  config.action_mailer.default_url_options = { host: "localhost", port: 3000 }

<<<<<<< HEAD
=======
  # Devise用のメール設定を追加
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
    address: ENV["SMTP_ADDRESS"] || "localhost",
    port: ENV["SMTP_PORT"] || 1025,
    domain: ENV["SMTP_DOMAIN"] || "localhost",
    user_name: ENV["SMTP_USERNAME"],
    password: ENV["SMTP_PASSWORD"],
    authentication: ENV["SMTP_USERNAME"].present? ? "plain" : nil,
    enable_starttls_auto: ENV["SMTP_USERNAME"].present?
  }

>>>>>>> origin/feat/claude-code-action
  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Suppress logger output for asset requests.
  config.assets.quiet = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
<<<<<<< HEAD
=======

  # Bullet設定（N+1クエリ検出用）
  config.after_initialize do
    # Bulletが利用可能な場合のみ設定を有効化
    if defined?(Bullet)
      Bullet.enable = true
      Bullet.alert = true
      Bullet.bullet_logger = true
      Bullet.console = true
      Bullet.rails_logger = true
      Bullet.add_footer = true
      # 以下は必要に応じて有効化
      # Bullet.stacktrace_includes = [ 'your_gem', 'your_middleware' ]
      # Bullet.skip_html_injection = false
    end
  end

  # 開発環境でもエラーハンドリングをテスト可能にするための設定
  # 特定のIPからのアクセス時だけ詳細エラーを表示（それ以外はproduction同様の動作に）

  # ローカルIPまたは特定IPからのアクセス時のみ詳細エラー表示
  local_ips = [ "127.0.0.1", "::1" ]  # localhost
  config.web_console.permissions = local_ips

  # デフォルトではローカルリクエストの場合に詳細なデバッグ情報を表示
  # ここを false にするとプロダクション環境と同じエラーページが表示される
  config.consider_all_requests_local = true

  # 環境変数またはクエリパラメータでエラーページ表示モードを切り替え
  # 例: http://localhost:3000/some_url?debug=0
  config.after_initialize do
    if ENV["ERROR_HANDLING_TEST"] == "1"
      # ERROR_HANDLING_TEST=1 の場合は production 環境同様のエラーページ表示
      config.consider_all_requests_local = false
    end

    ApplicationController.class_eval do
      # デバッグクエリパラメータによる動的切替
      prepend_before_action do
        if params[:debug] == "0"
          Rails.application.config.consider_all_requests_local = false
        elsif params[:debug] == "1"
          Rails.application.config.consider_all_requests_local = true
        end
      end
    end
  end

  # エラーログの詳細度設定
  config.log_level = :debug
>>>>>>> origin/feat/claude-code-action
end
